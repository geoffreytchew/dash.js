{"version":3,"sources":["node_modules/browser-pack/_prelude.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/externals/base64.js","node_modules/base64-js/lib/b64.js","node_modules/uuid/lib/bytesToUuid.js","node_modules/uuid/lib/rng-browser.js","node_modules/uuid/v1.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/core/FactoryMaker.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/core/events/CoreEvents.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/core/events/Events.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/core/events/EventsBase.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/secclientapi/SecClient.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/secclientapi/moneytrace.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/constants/Constants.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/CommonEncryption.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/Protection.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/ProtectionEvents.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/controllers/ProtectionController.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/controllers/ProtectionKeyController.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/drm/KeySystemClearKey.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/drm/KeySystemPlayReadyComcast.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/drm/KeySystemWidevine.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/models/ProtectionModel_01b.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/models/ProtectionModel_21Jan2015.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/models/ProtectionModel_3Feb2014.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/servers/ClearKey.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/servers/DRMToday.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/servers/PlayReady.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/servers/Widevine.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/vo/ClearKeyKeySet.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/vo/KeyError.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/vo/KeyMessage.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/vo/KeyPair.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/vo/KeySystemAccess.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/vo/KeySystemConfiguration.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/vo/MediaCapability.js","/Users/Geoffrey/dev/DRM/DASH/gchew_dash.js/src/streaming/protection/vo/NeedKey.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","dashjs","Protection","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","UTF8","encode","c","charCodeAt","push","decode","v","String","fromCharCode","join","BASE64","T","encodeArray","charAt","R","decodeArray","pop","ASCII","Uint8Array","encodeASCII","decodeASCII","elt","PLUS","PLUS_URL_SAFE","SLASH","SLASH_URL_SAFE","NUMBER","UPPER","LOWER","b64ToByteArray","b64","arr","L","j","tmp","placeHolders","len","Arr","uint8ToBase64","uint8","num","tripletToBase64","temp","extraBytes","output","Array","toByteArray","fromByteArray","base64js","bytesToUuid","buf","offset","bth","byteToHex","toString","substr","rng","crypto","msCrypto","getRandomValues","rnds8","rnds","Math","random","v1","options","b","clockseq","undefined","_clockseq","msecs","Date","getTime","nsecs","_lastNSecs","dt","_lastMSecs","tl","tmh","node","_nodeId","_seedBytes","FactoryMaker","extend","name","childInstance","override","context","extensionContext","getExtensionContext","instance","getSingletonInstance","className","singletonContexts","obj","setSingletonInstance","registerFactory","factory","factoriesArray","getFactoryByName","updateFactory","updateClassFactory","classFactories","getClassFactoryByName","getClassFactory","classConstructor","__dashjs_factory_name","create","merge","apply","arguments","updateSingletonFactory","singletonFactories","getSingletonFactoryByName","getSingletonFactory","getInstance","args","getClassName","extensionObject","extension","parent","prop","hasOwnProperty","extensions","forEach","CoreEvents","_EventsBase","_get","Object","getPrototypeOf","prototype","BUFFERING_COMPLETED","BUFFER_CLEARED","BUFFER_LEVEL_UPDATED","BYTES_APPENDED","CHECK_FOR_EXISTENCE_COMPLETED","CURRENT_TRACK_CHANGED","DATA_UPDATE_COMPLETED","DATA_UPDATE_STARTED","INITIALIZATION_LOADED","INIT_FRAGMENT_LOADED","INIT_REQUESTED","INTERNAL_MANIFEST_LOADED","LIVE_EDGE_SEARCH_COMPLETED","LOADING_COMPLETED","LOADING_PROGRESS","MANIFEST_UPDATED","MEDIA_FRAGMENT_LOADED","QUOTA_EXCEEDED","REPRESENTATION_UPDATED","SEGMENTS_LOADED","SERVICE_LOCATION_BLACKLIST_ADD","SERVICE_LOCATION_BLACKLIST_CHANGED","SOURCEBUFFER_APPEND_COMPLETED","SOURCEBUFFER_REMOVE_COMPLETED","STREAMS_COMPOSED","STREAM_BUFFERING_COMPLETED","STREAM_COMPLETED","TIMED_TEXT_REQUESTED","TIME_SYNCHRONIZATION_COMPLETED","URL_RESOLUTION_FAILED","VIDEO_CHUNK_RECEIVED","WALLCLOCK_TIME_UPDATED","XLINK_ELEMENT_LOADED","XLINK_READY","Events","_CoreEvents","events","EventsBase","config","publicOnly","evt","indexOf","acquireLicense","performance","markOnce","marks","START_SEC_CLIENT_ACQUIRE_LICENSE","Promise","resolve","reject","lrBody","keySystem","KEYSYSTEM_MAP","licenseRequest","_base64Js","contentMetadata","mediaUsage","accessToken","accessAttributes","_step","_iterator","keys","Symbol","iterator","_iteratorNormalCompletion","next","done","entry","value","jsonizedLR","JSON","stringify","xhr","XMLHttpRequest","open","serviceHostUrl","responseType","headerInfo","requestMetadata","Accept","_moneytraceJs2","key","setRequestHeader","onload","END_SEC_CLIENT_SEND_TO_MDS","licenseResult","status","response","console","log","statusText","onerror","START_SEC_CLIENT_SEND_TO_MDS","send","then","license","licObj","buffer","accessAttributesStatus","END_SEC_CLIENT_ACQUIRE_LICENSE","err","error","message","stack","com.microsoft.playready","com.widevine.alpha","getRandomInt","min","max","ceil","floor","generateMoneyTrace","uuid","uuidv1","Constants","init","STREAM","VIDEO","AUDIO","TEXT","FRAGMENTED_TEXT","EMBEDDED_TEXT","MUXED","LOCATION","INITIALIZE","TEXT_SHOWING","TEXT_HIDDEN","CC1","CC3","STPP","TTML","VTT","WVTT","SUGGESTED_PRESENTATION_DELAY","SCHEME_ID_URI","START_TIME","ABR_STRATEGY_DYNAMIC","ABR_STRATEGY_BOLA","ABR_STRATEGY_THROUGHPUT","MOVING_AVERAGE_SLIDING_WINDOW","MOVING_AVERAGE_EWMA","constants","CommonEncryption","cpArray","retVal","cp","schemeIdUri","toLowerCase","pssh","view","DataView","version","getUint8","getUint32","slice","initData","psshList","parsePSSHList","cpData","_externalsBase642","__text","data","dv","byteCursor","size","nextBox","systemID","boxStart","byteLength","val","createProtectionSystem","controller","protectionKeyController","_controllersProtectionKeyController2","setConfig","initialize","protectionModel","getProtectionModel","_controllersProtectionController2","adapter","eventBus","capabilities","setEncryptedMediaSupported","errHandler","videoElement","videoModel","getElement","onencrypted","mediaKeys","navigator","requestMediaKeySystemAccess","_modelsProtectionModel_21Jan20152","getAPI","APIS_ProtectionModel_3Feb2014","_modelsProtectionModel_3Feb20142","api","APIS_ProtectionModel_01b","_modelsProtectionModel_01b2","apis","generateKeyRequest","addKey","cancelKeyRequest","needkey","keyerror","keyadded","keymessage","setMediaKeys","MediaKeys","release","ready","close","_coreFactoryMaker2","_ProtectionEvents2","ProtectionEvents","INTERNAL_KEY_MESSAGE","INTERNAL_KEY_SYSTEM_SELECTED","KEY_ADDED","KEY_ERROR","KEY_MESSAGE","KEY_SESSION_CLOSED","KEY_SESSION_CREATED","KEY_SESSION_REMOVED","KEY_STATUSES_CHANGED","KEY_SYSTEM_ACCESS_COMPLETE","KEY_SYSTEM_SELECTED","LICENSE_REQUEST_COMPLETE","NEED_KEY","PROTECTION_CREATED","PROTECTION_DESTROYED","SERVER_CERTIFICATE_UPDATED","TEARDOWN_COMPLETE","VIDEO_ELEMENT_SELECTED","protectionEvents","ProtectionController","setup","keySystems","getKeySystems","pendingNeedKeyData","initialized","sessionType","robustnessLevel","_coreEventsEvents2","_Protection2","manifest","aInfo","vInfo","streamInfo","getStreamsInfo","audioInfo","getMediaInfoForType","_streamingConstantsConstants2","videoInfo","mediaInfo","supportedKS","getSupportedKeySystemsFromContentProtection","contentProtection","selectKeySystem","createKeySession","initDataForKS","_CommonEncryption2","getPSSHForKeySystem","currentInitData","getAllInitData","initDataEquals","trigger","systemString","loadKeySession","sessionID","removeKeySession","sessionToken","closeKeySession","setServerCertificate","serverCertificate","setMediaElement","element","on","onNeedKey","onKeyMessage","off","setSessionType","setRobustnessLevel","level","setProtectionData","protDataSet","reset","getProtData","protData","keySystemString","getKeySystemConfiguration","audioCapabilities","videoCapabilities","audioRobustness","videoRobustness","_voMediaCapability2","codec","_voKeySystemConfiguration2","fromManifest","requestedKeySystems","ksIdx","ks","configs","onKeySystemAccessComplete","event","requestKeySystemAccess","onKeySystemSelected","keySystemAccess","getKeySystem","sendLicenseRequestCompleteEvent","keyMessage","messageType","licenseServerData","getLicenseServer","eventData","getSessionID","isClearKey","clearkeys","processClearKeyLicenseRequest","updateKeySession","url","serverURL","laURL","getLicenseServerURLFromInitData","getPSSHData","defaultURL","getServerURLFromMessage","msgString","decoded_message","atob","includes","getLicenseRequestFromMessage","START_SEND_LICENSE_REQUEST","_secclientapiSecClientJs","END_SEND_LICENSE_REQUEST","getLicenseMessage","initDataType","abInitData","ArrayBuffer","isView","getSupportedKeySystems","ProtectionKeyController","_drmKeySystemPlayReadyComcast2","_drmKeySystemWidevine2","_drmKeySystemClearKey2","clearkeyKeySystem","getKeySystemBySystemString","initData1","initData2","data1","data2","cps","cpIdx","schemeIdURI","getInitData","shouldNotFilterOutKeySystem","_serversDRMToday2","_serversWidevine2","_serversPlayReady2","_serversClearKey2","getClearKeysFromProtectionData","protectionDataSet","getProtectionData","KeySystemClearKey","protectionData","clearkeySet","jsonMsg","parse","keyPairs","kids","clearkeyID","clearkey","_voKeyPair2","_voClearKeyKeySet2","parseInitDataFromContentProtection","getRequestHeadersFromMessage","KeySystemPlayReadyComcast","stringMessage","Content-Type","X-MoneyTrace","msg","Base64","numRecords","getUint16","parser","DOMParser","recordType","recordLength","recordData","record","Uint16Array","xmlDoc","parseFromString","policy","getElementsByTagNameNS","ckm_policy","btoa","textContent","PSSHBoxType","playreadySystemID","uint8arraydecodedPROHeader","PROSize","PSSHSize","PSSHBoxBuffer","PSSHBox","PSSHData","pro","prheader","setUint32","set","setPlayReadyMessageFormat","format","messageFormat","KeySystemWidevine","replaceKID","KID","pssh_array","replace","kidLen","pos","dataview","b64msg","byteNumbers","ProtectionModel_01b","pendingSessions","sessions","eventHandler","createEventHandler","removeEventListeners","ksConfigurations","ve","document","createElement","found","supportedAudio","supportedVideo","configIdx","videos","videoIdx","canPlayType","contentType","ksConfig","_voKeySystemAccess2","mediaElement","addEventListener","moreSessionsAllowed","newSession","getExpirationTime","NaN","getSessionType","START_GENERATE_KEY_REQUEST","ADD_KEY","keyID","handleEvent","type","EVENT_NEEDKEY","_voNeedKey2","findSessionByID","sessionId","errorCode","systemCode","_voKeyError2","EVENT_ADDKEY","END_GENERATE_KEY_REQUEST","shift","mediaKeyMessageError","_voKeyMessage2","sessionArray","removeEventListener","ProtectionModel_21Jan2015","numSessions","session","removeSession","closed","closeKeySessionInternal","requestKeySystemAccessInternal","START_CREATE_MEDIA_KEYS","mksa","createMediaKeys","mkeys","END_CREATE_MEDIA_KEYS","START_CREATE_SESSION","createSession","END_CREATE_SESSION","createSessionToken","START_GENERATE_LICENSE_REQUEST","generateRequest","toJWK","UPDATE_MEDIA_KEY_SESSION","update","load","success","remove","idx","START_REQUEST_MEDIA_KEY_ACCESS","mediaKeySystemAccess","END_REQUEST_MEDIA_KEY_ACCESS","configuration","getConfiguration","EVENT_ENCRYPTED","token","splice","END_GENERATE_LICENSE_REQUEST","expiration","getKeyStatuses","keyStatuses","ProtectionModel_3Feb2014","audios","audioIdx","isTypeSupported","ksAccess","ksConfiguration","boundDoSetKeys","doSetKeys","readyState","bind","keySession","destinationURL","ClearKey","substring","getHTTPMethod","getResponseType","serverResponse","keypair","keyid","kid","k","getErrorResponse","DRMToday","keySystemStr","PlayReady","Widevine","ClearKeyKeySet","numKeys","jwk","kty","alg","jwkString","bView","KeyError","errorString","KeyMessage","KeyPair","KeySystemAccess","KeySystemConfiguration","distinctiveIdentifier","persistentState","sessionTypes","initDataTypes","MediaCapability","robustness","NeedKey"],"mappings":"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","file":"dash.protection.min.js","sourceRoot":"./src/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* $Date: 2007-06-12 18:02:31 $ */\n\n// from: http://bannister.us/weblog/2007/06/09/simple-base64-encodedecode-javascript/\n// Handles encode/decode of ASCII and Unicode strings.\n\nvar UTF8 = {};\nUTF8.encode = function(s) {\n    var u = [];\n    for (var i = 0; i < s.length; ++i) {\n        var c = s.charCodeAt(i);\n        if (c < 0x80) {\n            u.push(c);\n        } else if (c < 0x800) {\n            u.push(0xC0 | (c >> 6));\n            u.push(0x80 | (63 & c));\n        } else if (c < 0x10000) {\n            u.push(0xE0 | (c >> 12));\n            u.push(0x80 | (63 & (c >> 6)));\n            u.push(0x80 | (63 & c));\n        } else {\n            u.push(0xF0 | (c >> 18));\n            u.push(0x80 | (63 & (c >> 12)));\n            u.push(0x80 | (63 & (c >> 6)));\n            u.push(0x80 | (63 & c));\n        }\n    }\n    return u;\n};\nUTF8.decode = function(u) {\n    var a = [];\n    var i = 0;\n    while (i < u.length) {\n        var v = u[i++];\n        if (v < 0x80) {\n            // no need to mask byte\n        } else if (v < 0xE0) {\n            v = (31 & v) << 6;\n            v |= (63 & u[i++]);\n        } else if (v < 0xF0) {\n            v = (15 & v) << 12;\n            v |= (63 & u[i++]) << 6;\n            v |= (63 & u[i++]);\n        } else {\n            v = (7 & v) << 18;\n            v |= (63 & u[i++]) << 12;\n            v |= (63 & u[i++]) << 6;\n            v |= (63 & u[i++]);\n        }\n        a.push(String.fromCharCode(v));\n    }\n    return a.join('');\n};\n\nvar BASE64 = {};\n(function(T){\n    var encodeArray = function(u) {\n        var i = 0;\n        var a = [];\n        var n = 0 | (u.length / 3);\n        while (0 < n--) {\n            var v = (u[i] << 16) + (u[i+1] << 8) + u[i+2];\n            i += 3;\n            a.push(T.charAt(63 & (v >> 18)));\n            a.push(T.charAt(63 & (v >> 12)));\n            a.push(T.charAt(63 & (v >> 6)));\n            a.push(T.charAt(63 & v));\n        }\n        if (2 == (u.length - i)) {\n            var v = (u[i] << 16) + (u[i+1] << 8);\n            a.push(T.charAt(63 & (v >> 18)));\n            a.push(T.charAt(63 & (v >> 12)));\n            a.push(T.charAt(63 & (v >> 6)));\n            a.push('=');\n        } else if (1 == (u.length - i)) {\n            var v = (u[i] << 16);\n            a.push(T.charAt(63 & (v >> 18)));\n            a.push(T.charAt(63 & (v >> 12)));\n            a.push('==');\n        }\n        return a.join('');\n    }\n    var R = (function(){\n        var a = [];\n        for (var i=0; i<T.length; ++i) {\n            a[T.charCodeAt(i)] = i;\n        }\n        a['='.charCodeAt(0)] = 0;\n        return a;\n    })();\n    var decodeArray = function(s) {\n        var i = 0;\n        var u = [];\n        var n = 0 | (s.length / 4);\n        while (0 < n--) {\n            var v = (R[s.charCodeAt(i)] << 18) + (R[s.charCodeAt(i+1)] << 12) + (R[s.charCodeAt(i+2)] << 6) + R[s.charCodeAt(i+3)];\n            u.push(255 & (v >> 16));\n            u.push(255 & (v >> 8));\n            u.push(255 & v);\n            i += 4;\n        }\n        if (u) {\n            if ('=' == s.charAt(i-2)) {\n                u.pop();\n                u.pop();\n            } else if ('=' == s.charAt(i-1)) {\n                u.pop();\n            }\n        }\n        return u;\n    }\n    var ASCII = {};\n    ASCII.encode = function(s) {\n        var u = [];\n        for (var i = 0; i<s.length; ++i) {\n            u.push(s.charCodeAt(i));\n        }\n        return u;\n    };\n    ASCII.decode = function(u) {\n        for (var i = 0; i<s.length; ++i) {\n            a[i] = String.fromCharCode(a[i]);\n        }\n        return a.join('');\n    };\n    BASE64.decodeArray = function(s) {\n        var u = decodeArray(s);\n        return new Uint8Array(u);\n    };\n    BASE64.encodeASCII = function(s) {\n        var u = ASCII.encode(s);\n        return encodeArray(u);\n    };\n    BASE64.decodeASCII = function(s) {\n        var a = decodeArray(s);\n        return ASCII.decode(a);\n    };\n    BASE64.encode = function(s) {\n        var u = UTF8.encode(s);\n        return encodeArray(u);\n    };\n    BASE64.decode = function(s) {\n        var u = decodeArray(s);\n        return UTF8.decode(u);\n    };\n})(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");\n\n/*The following polyfills are not used in dash.js but have caused multiplayer integration issues.\n Therefore commenting them out.\nif (undefined === btoa) {\n    var btoa = BASE64.encode;\n}\nif (undefined === atob) {\n    var atob = BASE64.decode;\n}\n*/\n\nif (typeof exports !== 'undefined') {\n    exports.decode = BASE64.decode;\n    exports.decodeArray = BASE64.decodeArray;\n}\n","var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n;(function (exports) {\n\t'use strict';\n\n  var Arr = (typeof Uint8Array !== 'undefined')\n    ? Uint8Array\n    : Array\n\n\tvar PLUS   = '+'.charCodeAt(0)\n\tvar SLASH  = '/'.charCodeAt(0)\n\tvar NUMBER = '0'.charCodeAt(0)\n\tvar LOWER  = 'a'.charCodeAt(0)\n\tvar UPPER  = 'A'.charCodeAt(0)\n\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)\n\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)\n\n\tfunction decode (elt) {\n\t\tvar code = elt.charCodeAt(0)\n\t\tif (code === PLUS ||\n\t\t    code === PLUS_URL_SAFE)\n\t\t\treturn 62 // '+'\n\t\tif (code === SLASH ||\n\t\t    code === SLASH_URL_SAFE)\n\t\t\treturn 63 // '/'\n\t\tif (code < NUMBER)\n\t\t\treturn -1 //no match\n\t\tif (code < NUMBER + 10)\n\t\t\treturn code - NUMBER + 26 + 26\n\t\tif (code < UPPER + 26)\n\t\t\treturn code - UPPER\n\t\tif (code < LOWER + 26)\n\t\t\treturn code - LOWER + 26\n\t}\n\n\tfunction b64ToByteArray (b64) {\n\t\tvar i, j, l, tmp, placeHolders, arr\n\n\t\tif (b64.length % 4 > 0) {\n\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t}\n\n\t\t// the number of equal signs (place holders)\n\t\t// if there are two placeholders, than the two characters before it\n\t\t// represent one byte\n\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t// this is just a cheap hack to not do indexOf twice\n\t\tvar len = b64.length\n\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\n\t\t// base64 is 4/3 + up to two characters of the original data\n\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\n\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\n\t\tvar L = 0\n\n\t\tfunction push (v) {\n\t\t\tarr[L++] = v\n\t\t}\n\n\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\tif (placeHolders === 2) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\tpush(tmp & 0xFF)\n\t\t} else if (placeHolders === 1) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\treturn arr\n\t}\n\n\tfunction uint8ToBase64 (uint8) {\n\t\tvar i,\n\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\toutput = \"\",\n\t\t\ttemp, length\n\n\t\tfunction encode (num) {\n\t\t\treturn lookup.charAt(num)\n\t\t}\n\n\t\tfunction tripletToBase64 (num) {\n\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t}\n\n\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\toutput += tripletToBase64(temp)\n\t\t}\n\n\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\tswitch (extraBytes) {\n\t\t\tcase 1:\n\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\toutput += '=='\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\toutput += '='\n\t\t\t\tbreak\n\t\t}\n\n\t\treturn output\n\t}\n\n\texports.toByteArray = b64ToByteArray\n\texports.fromByteArray = uint8ToBase64\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  return bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\nmodule.exports = bytesToUuid;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\nvar rng;\n\nvar crypto = global.crypto || global.msCrypto; // for IE 11\nif (crypto && crypto.getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n  rng = function whatwgRNG() {\n    crypto.getRandomValues(rnds8);\n    return rnds8;\n  };\n}\n\nif (!rng) {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n  rng = function() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n\nmodule.exports = rng;\n","var rng = require(4);\nvar bytesToUuid = require(3);\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\n// random #'s we need to init node and clockseq\nvar _seedBytes = rng();\n\n// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\nvar _nodeId = [\n  _seedBytes[0] | 0x01,\n  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]\n];\n\n// Per 4.2.2, randomize (14 bit) clockseq\nvar _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n\n// Previous uuid creation time\nvar _lastMSecs = 0, _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  var node = options.node || _nodeId;\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @module FactoryMaker\n */\nlet FactoryMaker = (function () {\n\n    let instance;\n    let extensions = [];\n    let singletonContexts = [];\n    let singletonFactories = [];\n    let classFactories = [];\n\n    function extend(name, childInstance, override, context) {\n        let extensionContext = getExtensionContext(context);\n        if (!extensionContext[name] && childInstance) {\n            extensionContext[name] = {\n                instance: childInstance,\n                override: override\n            };\n        }\n    }\n\n    /**\n     * Use this method from your extended object.  this.factory is injected into your object.\n     * this.factory.getSingletonInstance(this.context, 'VideoModel')\n     * will return the video model for use in the extended object.\n     *\n     * @param {Object} context - injected into extended object as this.context\n     * @param {string} className - string name found in all dash.js objects\n     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.\n     * @returns {*} Context aware instance of specified singleton name.\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function getSingletonInstance(context, className) {\n        for (let i in singletonContexts) {\n            let obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                return obj.instance;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.\n     *\n     * @param {Object} context\n     * @param {string} className\n     * @param {Object} instance\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function setSingletonInstance(context, className, instance) {\n        for (let i in singletonContexts) {\n            let obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                singletonContexts[i].instance = instance;\n                return;\n            }\n        }\n        singletonContexts.push({\n            name: className,\n            context: context,\n            instance: instance\n        });\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Factories storage Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function registerFactory(name, factory, factoriesArray) {\n        for (let i in factoriesArray) {\n            let obj = factoriesArray[i];\n            if (obj.name === name) {\n                factoriesArray[i].factory = factory;\n                return;\n            }\n        }\n        factoriesArray.push({\n            name: name,\n            factory: factory\n        });\n    }\n\n    function getFactoryByName(name, factoriesArray) {\n        for (let i in factoriesArray) {\n            let obj = factoriesArray[i];\n            if (obj.name === name) {\n                return factoriesArray[i].factory;\n            }\n        }\n        return null;\n    }\n\n    function updateFactory(name, factory, factoriesArray) {\n        for (let i in factoriesArray) {\n            let obj = factoriesArray[i];\n            if (obj.name === name) {\n                factoriesArray[i].factory = factory;\n                return;\n            }\n        }\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Class Factories Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateClassFactory(name, factory) {\n        updateFactory(name, factory, classFactories);\n    }\n\n    function getClassFactoryByName(name) {\n        return getFactoryByName(name, classFactories);\n    }\n\n    function getClassFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, classFactories);\n\n        if (!factory) {\n            factory = function (context) {\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    create: function () {\n                        return merge(classConstructor.__dashjs_factory_name, classConstructor.apply({\n                            context: context\n                        }, arguments), context, arguments);\n                    }\n                };\n            };\n\n            registerFactory(classConstructor.__dashjs_factory_name, factory, classFactories); // store factory\n        }\n        return factory;\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Singleton Factory MAangement\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateSingletonFactory(name, factory) {\n        updateFactory(name, factory, singletonFactories);\n    }\n\n    function getSingletonFactoryByName(name) {\n        return getFactoryByName(name, singletonFactories);\n    }\n\n    function getSingletonFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, singletonFactories);\n        if (!factory) {\n            factory = function (context) {\n                let instance;\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    getInstance: function () {\n                        // If we don't have an instance yet check for one on the context\n                        if (!instance) {\n                            instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);\n                        }\n                        // If there's no instance on the context then create one\n                        if (!instance) {\n                            instance = merge(classConstructor.__dashjs_factory_name, classConstructor.apply({\n                                context: context\n                            }, arguments), context, arguments);\n                            singletonContexts.push({\n                                name: classConstructor.__dashjs_factory_name,\n                                context: context,\n                                instance: instance\n                            });\n                        }\n                        return instance;\n                    }\n                };\n            };\n            registerFactory(classConstructor.__dashjs_factory_name, factory, singletonFactories); // store factory\n        }\n\n        return factory;\n    }\n\n    function merge(name, classConstructor, context, args) {\n        // Add getClassName function to class instance prototype (used by Debug)\n        classConstructor.getClassName = function () {return name;};\n\n        let extensionContext = getExtensionContext(context);\n        let extensionObject = extensionContext[name];\n        if (extensionObject) {\n            let extension = extensionObject.instance;\n            if (extensionObject.override) { //Override public methods in parent but keep parent.\n                extension = extension.apply({\n                    context: context,\n                    factory: instance,\n                    parent: classConstructor\n                }, args);\n                for (const prop in extension) {\n                    if (classConstructor.hasOwnProperty(prop)) {\n                        classConstructor[prop] = extension[prop];\n                    }\n                }\n            } else { //replace parent object completely with new object. Same as dijon.\n                return extension.apply({\n                    context: context,\n                    factory: instance\n                }, args);\n            }\n        }\n        return classConstructor;\n    }\n\n    function getExtensionContext(context) {\n        let extensionContext;\n        extensions.forEach(function (obj) {\n            if (obj === context) {\n                extensionContext = obj;\n            }\n        });\n        if (!extensionContext) {\n            extensionContext = extensions.push(context);\n        }\n        return extensionContext;\n    }\n\n    instance = {\n        extend: extend,\n        getSingletonInstance: getSingletonInstance,\n        setSingletonInstance: setSingletonInstance,\n        getSingletonFactory: getSingletonFactory,\n        getSingletonFactoryByName: getSingletonFactoryByName,\n        updateSingletonFactory: updateSingletonFactory,\n        getClassFactory: getClassFactory,\n        getClassFactoryByName: getClassFactoryByName,\n        updateClassFactory: updateClassFactory\n    };\n\n    return instance;\n\n}());\n\nexport default FactoryMaker;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from './EventsBase';\n\n/**\n * These are internal events that should not be needed at the player level.\n * If you find and event in here that you would like access to from MediaPlayer level\n * please add an issue at https://github.com/Dash-Industry-Forum/dash.js/issues/new\n * @class\n * @ignore\n */\nclass CoreEvents extends EventsBase {\n    constructor () {\n        super();\n        this.BUFFERING_COMPLETED = 'bufferingCompleted';\n        this.BUFFER_CLEARED = 'bufferCleared';\n        this.BUFFER_LEVEL_UPDATED = 'bufferLevelUpdated';\n        this.BYTES_APPENDED = 'bytesAppended';\n        this.CHECK_FOR_EXISTENCE_COMPLETED = 'checkForExistenceCompleted';\n        this.CURRENT_TRACK_CHANGED = 'currentTrackChanged';\n        this.DATA_UPDATE_COMPLETED = 'dataUpdateCompleted';\n        this.DATA_UPDATE_STARTED = 'dataUpdateStarted';\n        this.INITIALIZATION_LOADED = 'initializationLoaded';\n        this.INIT_FRAGMENT_LOADED = 'initFragmentLoaded';\n        this.INIT_REQUESTED = 'initRequested';\n        this.INTERNAL_MANIFEST_LOADED = 'internalManifestLoaded';\n        this.LIVE_EDGE_SEARCH_COMPLETED = 'liveEdgeSearchCompleted';\n        this.LOADING_COMPLETED = 'loadingCompleted';\n        this.LOADING_PROGRESS = 'loadingProgress';\n        this.MANIFEST_UPDATED = 'manifestUpdated';\n        this.MEDIA_FRAGMENT_LOADED = 'mediaFragmentLoaded';\n        this.QUOTA_EXCEEDED = 'quotaExceeded';\n        this.REPRESENTATION_UPDATED = 'representationUpdated';\n        this.SEGMENTS_LOADED = 'segmentsLoaded';\n        this.SERVICE_LOCATION_BLACKLIST_ADD = 'serviceLocationBlacklistAdd';\n        this.SERVICE_LOCATION_BLACKLIST_CHANGED = 'serviceLocationBlacklistChanged';\n        this.SOURCEBUFFER_APPEND_COMPLETED = 'sourceBufferAppendCompleted';\n        this.SOURCEBUFFER_REMOVE_COMPLETED = 'sourceBufferRemoveCompleted';\n        this.STREAMS_COMPOSED = 'streamsComposed';\n        this.STREAM_BUFFERING_COMPLETED = 'streamBufferingCompleted';\n        this.STREAM_COMPLETED = 'streamCompleted';\n        this.TIMED_TEXT_REQUESTED = 'timedTextRequested';\n        this.TIME_SYNCHRONIZATION_COMPLETED = 'timeSynchronizationComplete';\n        this.URL_RESOLUTION_FAILED = 'urlResolutionFailed';\n        this.VIDEO_CHUNK_RECEIVED = 'videoChunkReceived';\n        this.WALLCLOCK_TIME_UPDATED = 'wallclockTimeUpdated';\n        this.XLINK_ELEMENT_LOADED = 'xlinkElementLoaded';\n        this.XLINK_READY = 'xlinkReady';\n    }\n}\n\nexport default CoreEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nimport CoreEvents from './CoreEvents';\nclass Events extends CoreEvents {\n}\nlet events = new Events();\nexport default events;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass EventsBase {\n    extend (events, config) {\n        if (!events) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const evt in events) {\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\n            this[evt] = events[evt];\n\n        }\n    }\n}\n\nexport default EventsBase;","//import \"./authService.js\";\nimport generateMoneyTrace from './moneytrace.js';\nimport { fromByteArray, toByteArray } from 'base64-js';\n//var Performance = require(\"sc-performance\").SecClientPerformance;\n//import verifyDigest from \"./crypto_util.js\";\n\nconst KEYSYSTEM_MAP = {\n    'com.microsoft.playready': 'playReady',\n    'com.widevine.alpha': 'widevine'\n};\n\n/*\nfunction provisionKeys(\n    serviceHostUrl,\n    requestMetadata,\n    deviceAttributes,\n    keyProvisionResult,\n    deviceAuthenticationResult) {}\n\nfunction resolve(arg) { console.log(arg + ' resolved'); }\nfunction reject(arg) { console.log(arg + ' rejected'); }\n*/\n\nexport function acquireLicense(args) {\n    args.context.performance.markOnce(args.context.marks.START_SEC_CLIENT_ACQUIRE_LICENSE);\n\n    // TODO Is this needed? var anon = true;\n    const urlPost = '/license';\n\n    return new Promise(function (resolve, reject) {\n        // Generate request body\n        var lrBody = {};\n\n        if (args.keySystem) {\n            lrBody.keySystem = KEYSYSTEM_MAP[args.keySystem];\n            //console.log(' Adding keySystem');\n        }\n        if (args.licenseRequest) {\n            lrBody.licenseRequest = fromByteArray(new Uint8Array(args.licenseRequest));\n            //console.log(' Adding License Request Body');\n        }\n        if (args.contentMetadata) {\n            lrBody.contentMetadata = args.contentMetadata;\n            //console.log(' Adding contentMetadata');\n        }\n        if (args.mediaUsage) {\n            lrBody.mediaUsage = args.mediaUsage;\n            //console.log(' Adding mediaUsage');\n        }\n        if (args.accessToken) {\n            lrBody.accessToken = args.accessToken;\n            //console.log(' Adding accessToken');\n        }\n        if (args.accessAttributes) {\n            //console.log(' Adding accessAttributes');\n            lrBody.accessAttributes = Object.create(null);\n            for (let entry of Object.keys(args.accessAttributes)) {\n                //console.log(': ' + entry + ', ' + args.accessAttributes[entry]);\n                lrBody.accessAttributes[entry[0]] = entry[1];\n            }\n        }\n\n        var jsonizedLR = JSON.stringify(lrBody);\n\n        var xhr = new XMLHttpRequest();\n\n        xhr.open('POST' , args.serviceHostUrl + urlPost, true);\n        xhr.responseType = 'json';\n        // Does this need to be supported??? --> xhr.withCredentials = true;\n\n        var headerInfo = args.requestMetadata;\n        if (headerInfo === undefined) {\n            headerInfo = {};\n        }\n\n        headerInfo.Accept = 'application/vnd.xcal.mds.licenseResponse+json; version=1';\n        headerInfo['Content-Type'] = 'application/vnd.xcal.mds.licenseRequest+json; version=1';\n        if (headerInfo['X-MoneyTrace'] === undefined) {\n            headerInfo['X-MoneyTrace'] = generateMoneyTrace();\n        }\n\n        if (headerInfo) {\n            Object.keys(headerInfo).forEach(function (key) {\n                //console.log('Add Header: ' + key + ' = ' + headerInfo[key]);\n                xhr.setRequestHeader(key, headerInfo[key]);\n            });\n        }\n\n        xhr.onload = function () {\n            args.context.performance.markOnce(args.context.marks.END_SEC_CLIENT_SEND_TO_MDS);\n            var licenseResult = {};\n            //console.log(\"ONLOAD Response received with status \" + xhr.status + \".\");\n            // console.log(xhr.getAllResponseHeaders());\n            // var digestHeader = xhr.getResponseHeader(\"Digest\");\n            // console.log(\"Digest header: \" + digestHeader);\n            // var digest = digestHeader.slice(\"SHA-256=\".length);\n            // if (verifyDigest(xhr.response, digest)) {\n            if (xhr.status == 200) {\n                licenseResult = xhr.response;\n                //console.log('License Result:');\n                //console.log(licenseResult);\n                resolve(licenseResult);\n            } else {\n                console.log('*** License Result bad status:' + xhr.status + ' ' + xhr.statusText);\n                reject(xhr.status + ' ' + xhr.statusText);\n            }\n            // } else {\n            //   console.log('Bad response digest ' + digest);\n            //   reject(xhr.response);\n            // }\n        };\n\n        xhr.onerror = function () {\n            //console.log(\"ONERROR Response received with status \" + xhr.status + \".\");\n            args.context.performance.markOnce(args.context.marks.END_SEC_CLIENT_SEND_TO_MDS);\n            reject(xhr.statusText);\n        };\n        //console.log('Sending license request ');\n        //console.log('JSON Request Body: ' + jsonizedLR);\n        args.context.performance.markOnce(args.context.marks.START_SEC_CLIENT_SEND_TO_MDS);\n        xhr.send(jsonizedLR);\n        //console.log('Send completed.');\n    }).then(response => {\n        console.log('[COMCAST] DEBUG License Response = ' + response.license);\n        var licObj = {\n            license: toByteArray(response.license).buffer,\n            accessAttributesStatus: response.accessAttributesStatus\n        };\n        args.context.performance.markOnce(args.context.marks.END_SEC_CLIENT_ACQUIRE_LICENSE);\n        return licObj;\n    })\n    .catch(function (err) {\n        args.context.performance.markOnce(args.context.marks.END_SEC_CLIENT_ACQUIRE_LICENSE);\n        console.error(err.message);\n        console.log('CATCH with result of :\\n' + err.stack);\n    });\n}","const uuidv1 = require('uuid/v1');\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\n\nexport default function generateMoneyTrace() {\n    var uuid = uuidv1();\n    var parent = getRandomInt(-2147483647, 2147483647);\n    var span = parent;\n\n    return 'trace-id=' + uuid + ';parent-id=' + parent + ';span-id=' + span;\n}\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Constants declaration\n * @class\n * @ignore\n */\nclass Constants {\n\n    init () {\n        this.STREAM = 'stream';\n        this.VIDEO = 'video';\n        this.AUDIO = 'audio';\n        this.TEXT = 'text';\n        this.FRAGMENTED_TEXT = 'fragmentedText';\n        this.EMBEDDED_TEXT = 'embeddedText';\n        this.MUXED = 'muxed';\n        this.LOCATION = 'Location';\n        this.INITIALIZE = 'initialize';\n        this.TEXT_SHOWING = 'showing';\n        this.TEXT_HIDDEN = 'hidden';\n        this.CC1 = 'CC1';\n        this.CC3 = 'CC3';\n        this.STPP = 'stpp';\n        this.TTML = 'ttml';\n        this.VTT = 'vtt';\n        this.WVTT = 'wvtt';\n        this.UTF8 = 'utf-8';\n        this.SUGGESTED_PRESENTATION_DELAY = 'suggestedPresentationDelay';\n        this.SCHEME_ID_URI = 'schemeIdUri';\n        this.START_TIME = 'starttime';\n        this.ABR_STRATEGY_DYNAMIC = 'abrDynamic';\n        this.ABR_STRATEGY_BOLA = 'abrBola';\n        this.ABR_STRATEGY_THROUGHPUT = 'abrThroughput';\n        this.MOVING_AVERAGE_SLIDING_WINDOW = 'slidingWindow';\n        this.MOVING_AVERAGE_EWMA = 'ewma';\n    }\n\n    constructor () {\n        this.init();\n    }\n}\n\nlet constants = new Constants();\nexport default constants;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport BASE64 from '../../../externals/base64';\n\nclass CommonEncryption {\n    /**\n     * Find and return the ContentProtection element in the given array\n     * that indicates support for MPEG Common Encryption\n     *\n     * @param {Array} cpArray array of content protection elements\n     * @returns {Object|null} the Common Encryption content protection element or\n     * null if one was not found\n     */\n    static findCencContentProtection(cpArray) {\n        let retVal = null;\n        for (let i = 0; i < cpArray.length; ++i) {\n            let cp = cpArray[i];\n            if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' &&\n                    cp.value.toLowerCase() === 'cenc')\n                retVal = cp;\n        }\n        return retVal;\n    }\n\n    /**\n     * Returns just the data portion of a single PSSH\n     *\n     * @param {ArrayBuffer} pssh - the PSSH\n     * @return {ArrayBuffer} data portion of the PSSH\n     */\n    static getPSSHData(pssh) {\n        let offset = 8; // Box size and type fields\n        let view = new DataView(pssh);\n\n        // Read version\n        let version = view.getUint8(offset);\n\n        offset += 20; // Version (1), flags (3), system ID (16)\n\n        if (version > 0) {\n            offset += 4 + (16 * view.getUint32(offset)); // Key ID count (4) and All key IDs (16*count)\n        }\n\n        offset += 4; // Data size\n        return pssh.slice(offset);\n    }\n\n    /**\n     * Returns the PSSH associated with the given key system from the concatenated\n     * list of PSSH boxes in the given initData\n     *\n     * @param {KeySystem} keySystem the desired\n     * key system\n     * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\n     * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found\n     * or null if a valid association could not be found.\n     */\n    static getPSSHForKeySystem(keySystem, initData) {\n        let psshList = CommonEncryption.parsePSSHList(initData);\n        if (psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\n            return psshList[keySystem.uuid.toLowerCase()];\n        }\n        return null;\n    }\n\n    /**\n     * Parse a standard common encryption PSSH which contains a simple\n     * base64-encoding of the init data\n     *\n     * @param {Object} cpData the ContentProtection element\n     * @returns {ArrayBuffer|null} the init data or null if not found\n     */\n    static parseInitDataFromContentProtection(cpData) {\n        if ('pssh' in cpData) {\n            return BASE64.decodeArray(cpData.pssh.__text).buffer;\n        }\n        return null;\n    }\n\n    /**\n     * Parses list of PSSH boxes into keysystem-specific PSSH data\n     *\n     * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by\n     * CDM as initialization data when CommonEncryption content is detected\n     * @returns {Object|Array} an object that has a property named according to each of\n     * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\n     * and a ArrayBuffer (the entire PSSH box) as the property value\n     */\n    static parsePSSHList(data) {\n\n        if (data === null)\n            return [];\n\n        let dv = new DataView(data);\n        let done = false;\n        let pssh = {};\n\n        // TODO: Need to check every data read for end of buffer\n        let byteCursor = 0;\n        while (!done) {\n\n            let size,\n                nextBox,\n                version,\n                systemID,\n                psshDataSize;\n            let boxStart = byteCursor;\n\n            if (byteCursor >= dv.buffer.byteLength)\n                break;\n\n            /* Box size */\n            size = dv.getUint32(byteCursor);\n            nextBox = byteCursor + size;\n            byteCursor += 4;\n\n            /* Verify PSSH */\n            if (dv.getUint32(byteCursor) !== 0x70737368) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor += 4;\n\n            /* Version must be 0 or 1 */\n            version = dv.getUint8(byteCursor);\n            if (version !== 0 && version !== 1) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor++;\n\n            byteCursor += 3; /* skip flags */\n\n            // 16-byte UUID/SystemID\n            systemID = '';\n            let i, val;\n            for (i = 0; i < 4; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 4;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 6; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 6;\n\n            systemID = systemID.toLowerCase();\n\n            /* PSSH Data Size */\n            psshDataSize = dv.getUint32(byteCursor);\n            byteCursor += 4;\n\n            /* PSSH Data */\n            pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\n            byteCursor = nextBox;\n        }\n\n        return pssh;\n    }\n}\n\nexport default CommonEncryption;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport ProtectionController from './controllers/ProtectionController';\nimport ProtectionKeyController from './controllers/ProtectionKeyController';\nimport ProtectionEvents from './ProtectionEvents';\nimport ProtectionModel_21Jan2015 from './models/ProtectionModel_21Jan2015';\nimport ProtectionModel_3Feb2014 from './models/ProtectionModel_3Feb2014';\nimport ProtectionModel_01b from './models/ProtectionModel_01b';\nimport FactoryMaker from '../../core/FactoryMaker';\n\nconst APIS_ProtectionModel_01b = [\n    // Un-prefixed as per spec\n    {\n        // Video Element\n        generateKeyRequest: 'generateKeyRequest',\n        addKey: 'addKey',\n        cancelKeyRequest: 'cancelKeyRequest',\n\n        // Events\n        needkey: 'needkey',\n        keyerror: 'keyerror',\n        keyadded: 'keyadded',\n        keymessage: 'keymessage'\n    },\n    // Webkit-prefixed (early Chrome versions and Chrome with EME disabled in chrome://flags)\n    {\n        // Video Element\n        generateKeyRequest: 'webkitGenerateKeyRequest',\n        addKey: 'webkitAddKey',\n        cancelKeyRequest: 'webkitCancelKeyRequest',\n\n        // Events\n        needkey: 'webkitneedkey',\n        keyerror: 'webkitkeyerror',\n        keyadded: 'webkitkeyadded',\n        keymessage: 'webkitkeymessage'\n    }\n];\n\nconst APIS_ProtectionModel_3Feb2014 = [\n    // Un-prefixed as per spec\n    // Chrome 38-39 (and some earlier versions) with chrome://flags -- Enable Encrypted Media Extensions\n    {\n        // Video Element\n        setMediaKeys: 'setMediaKeys',\n        // MediaKeys\n        MediaKeys: 'MediaKeys',\n        // MediaKeySession\n        release: 'close',\n\n        // Events\n        needkey: 'needkey',\n        error: 'keyerror',\n        message: 'keymessage',\n        ready: 'keyadded',\n        close: 'keyclose'\n    },\n    // MS-prefixed (IE11, Windows 8.1)\n    {\n        // Video Element\n        setMediaKeys: 'msSetMediaKeys',\n        // MediaKeys\n        MediaKeys: 'MSMediaKeys',\n        // MediaKeySession\n        release: 'close',\n        // Events\n        needkey: 'msneedkey',\n        error: 'mskeyerror',\n        message: 'mskeymessage',\n        ready: 'mskeyadded',\n        close: 'mskeyclose'\n    }\n];\n\nfunction Protection() {\n\n    let instance;\n    let context = this.context;\n\n    /**\n     * Create a ProtectionController and associated ProtectionModel for use with\n     * a single piece of content.\n     *\n     * @param {Object} config\n     * @return {ProtectionController} protection controller\n     *\n     */\n    function createProtectionSystem(config) {\n\n        let controller = null;\n\n        let protectionKeyController = ProtectionKeyController(context).getInstance();\n        protectionKeyController.setConfig({log: config.log});\n        protectionKeyController.initialize();\n\n        let protectionModel =  getProtectionModel(config);\n\n        if (!controller && protectionModel) {//TODO add ability to set external controller if still needed at all?\n            controller = ProtectionController(context).create({\n                protectionModel: protectionModel,\n                protectionKeyController: protectionKeyController,\n                adapter: config.adapter,\n                eventBus: config.eventBus,\n                log: config.log\n            });\n            config.capabilities.setEncryptedMediaSupported(true);\n        }\n        return controller;\n    }\n\n    function getProtectionModel(config) {\n\n        let log = config.log;\n        let eventBus = config.eventBus;\n        let errHandler = config.errHandler;\n        let videoElement = config.videoModel.getElement();\n\n        if (videoElement.onencrypted !== undefined &&\n            videoElement.mediaKeys !== undefined &&\n            navigator.requestMediaKeySystemAccess !== undefined &&\n            typeof navigator.requestMediaKeySystemAccess === 'function') {\n\n            log('EME detected on this user agent! (ProtectionModel_21Jan2015)');\n            return ProtectionModel_21Jan2015(context).create({log: log, eventBus: eventBus});\n\n        } else if (getAPI(videoElement, APIS_ProtectionModel_3Feb2014)) {\n\n            log('EME detected on this user agent! (ProtectionModel_3Feb2014)');\n            return ProtectionModel_3Feb2014(context).create({log: log, eventBus: eventBus, api: getAPI(videoElement, APIS_ProtectionModel_3Feb2014)});\n\n        } else if (getAPI(videoElement, APIS_ProtectionModel_01b)) {\n\n            log('EME detected on this user agent! (ProtectionModel_01b)');\n            return ProtectionModel_01b(context).create({log: log, eventBus: eventBus, errHandler: errHandler, api: getAPI(videoElement, APIS_ProtectionModel_01b)});\n\n        } else {\n\n            log('No supported version of EME detected on this user agent! - Attempts to play encrypted content will fail!');\n            return null;\n\n        }\n    }\n\n    function getAPI(videoElement, apis) {\n\n        for (let i = 0; i < apis.length; i++) {\n            let api = apis[i];\n            // detect if api is supported by browser\n            // check only first function in api -> should be fine\n            if (typeof videoElement[api[Object.keys(api)[0]]] !== 'function') {\n                continue;\n            }\n\n            return api;\n        }\n\n        return null;\n    }\n\n    instance = {\n        createProtectionSystem: createProtectionSystem\n    };\n\n    return instance;\n}\n\nProtection.__dashjs_factory_name = 'Protection';\nlet factory = FactoryMaker.getClassFactory(Protection);\nfactory.events = ProtectionEvents;\nFactoryMaker.updateClassFactory(Protection.__dashjs_factory_name, factory);\nexport default factory;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../../core/events/EventsBase';\n/**\n * @class\n *\n */\nclass ProtectionEvents extends EventsBase {\n    /**\n     * @description Public facing external events to be used when including protection package.\n     * All public events will be aggregated into the MediaPlayerEvents Class and can be accessed\n     * via MediaPlayer.events.  public_ is the prefix that we use to move event names to MediaPlayerEvents.\n     */\n    constructor () {\n        super();\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         *\n         * @ignore\n         */\n        this.INTERNAL_KEY_MESSAGE = 'internalKeyMessage';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @ignore\n         */\n        this.INTERNAL_KEY_SYSTEM_SELECTED = 'internalKeySystemSelected';\n\n        /**\n         * Event ID for events delivered when a new key has been added\n         *\n         * @constant\n         * @deprecated The latest versions of the EME specification no longer\n         * use this event.  {@MediaPlayer.models.protectionModel.eventList.KEY_STATUSES_CHANGED}\n         * is preferred.\n         * @event ProtectionEvents#KEY_ADDED\n         */\n        this.KEY_ADDED = 'public_keyAdded';\n        /**\n         * Event ID for events delivered when an error is encountered by the CDM\n         * while processing a license server response message\n         * @event ProtectionEvents#KEY_ERROR\n         */\n        this.KEY_ERROR = 'public_keyError';\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         * @event ProtectionEvents#KEY_MESSAGE\n         */\n        this.KEY_MESSAGE = 'public_keyMessage';\n\n        /**\n         * Event ID for events delivered when a key session close\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CLOSED\n         */\n        this.KEY_SESSION_CLOSED = 'public_keySessionClosed';\n\n        /**\n         * Event ID for events delivered when a new key sessions creation\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CREATED\n         */\n        this.KEY_SESSION_CREATED = 'public_keySessionCreated';\n\n        /**\n         * Event ID for events delivered when a key session removal\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_REMOVED\n         */\n        this.KEY_SESSION_REMOVED = 'public_keySessionRemoved';\n\n\n        /**\n         * Event ID for events delivered when the status of one or more\n         * decryption keys has changed\n         * @event ProtectionEvents#KEY_STATUSES_CHANGED\n         */\n        this.KEY_STATUSES_CHANGED = 'public_keyStatusesChanged';\n\n        /**\n         * Event ID for events delivered when a key system access procedure\n         * has completed\n         * @ignore\n         */\n        this.KEY_SYSTEM_ACCESS_COMPLETE = 'keySystemAccessComplete';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @event ProtectionEvents#KEY_SYSTEM_SELECTED\n         */\n        this.KEY_SYSTEM_SELECTED = 'public_keySystemSelected';\n\n        /**\n         * Event ID for events delivered when a license request procedure\n         * has completed\n         * @event ProtectionEvents#LICENSE_REQUEST_COMPLETE\n         */\n        this.LICENSE_REQUEST_COMPLETE = 'public_licenseRequestComplete';\n\n        /**\n         * Event ID for needkey/encrypted events\n         * @ignore\n         */\n        this.NEED_KEY = 'needkey';\n\n        /**\n         * Event ID for events delivered when the Protection system is detected and created.\n         * @event ProtectionEvents#PROTECTION_CREATED\n         */\n        this.PROTECTION_CREATED = 'public_protectioncreated';\n\n        /**\n         * Event ID for events delivered when the Protection system is destroyed.\n         * @event ProtectionEvents#PROTECTION_DESTROYED\n         */\n        this.PROTECTION_DESTROYED = 'public_protectiondestroyed';\n\n        /**\n         * Event ID for events delivered when a new server certificate has\n         * been delivered to the CDM\n         * @ignore\n         */\n        this.SERVER_CERTIFICATE_UPDATED = 'serverCertificateUpdated';\n\n        /**\n         * Event ID for events delivered when the process of shutting down\n         * a protection set has completed\n         * @ignore\n         */\n        this.TEARDOWN_COMPLETE =  'protectionTeardownComplete';\n\n        /**\n         * Event ID for events delivered when a HTMLMediaElement has been\n         * associated with the protection set\n         * @ignore\n         */\n        this.VIDEO_ELEMENT_SELECTED = 'videoElementSelected';\n    }\n}\n\nlet protectionEvents = new ProtectionEvents();\nexport default protectionEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../../../streaming/constants/Constants';\nimport CommonEncryption from '../CommonEncryption';\nimport Events from '../../../core/events/Events';\nimport MediaCapability from '../vo/MediaCapability';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport Protection from '../Protection';\nimport BASE64 from '../../../../externals/base64';\nimport { acquireLicense } from '../../../secclientapi/SecClient.js';\n\n/**\n * @module ProtectionController\n * @description Provides access to media protection information and functionality.  Each\n * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}\n * which encapsulates a set of protection information (EME APIs, selected key system,\n * key sessions).  The APIs of ProtectionController mostly align with the latest EME\n * APIs.  Key system selection is mostly automated when combined with app-overrideable\n * functionality provided in {@link ProtectionKeyController}.\n * @todo ProtectionController does almost all of its tasks automatically after init() is\n * called.  Applications might want more control over this process and want to go through\n * each step manually (key system selection, session creation, session maintenance).\n * @param {Object} config\n */\n\nfunction ProtectionController(config) {\n\n    let context = this.context;\n    let protectionKeyController = config.protectionKeyController;\n    let protectionModel = config.protectionModel;\n    let adapter = config.adapter;\n    let eventBus = config.eventBus;\n    let log = config.log;\n\n    let instance,\n        keySystems,\n        pendingNeedKeyData,\n        audioInfo,\n        videoInfo,\n        protDataSet,\n        initialized,\n        sessionType,\n        robustnessLevel,\n        keySystem;\n\n    function setup() {\n        keySystems = protectionKeyController.getKeySystems();\n        pendingNeedKeyData = [];\n        initialized = false;\n        sessionType = 'temporary';\n        robustnessLevel = '';\n\n        Events.extend(Protection.events);\n    }\n\n    /**\n     * Initialize this protection system with a given manifest and optional audio\n     * and video stream information.\n     *\n     * @param {Object} manifest the json version of the manifest XML document for the\n     * desired content.  Applications can download their manifest using\n     * {@link module:MediaPlayer#retrieveManifest}\n     * @param {StreamInfo} [aInfo] audio stream information\n     * @param {StreamInfo} [vInfo] video stream information\n     * @memberof module:ProtectionController\n     * @instance\n     * @todo This API will change when we have better support for allowing applications\n     * to select different adaptation sets for playback.  Right now it is clunky for\n     * applications to create {@link StreamInfo} with the right information,\n     */\n    function initialize(manifest, aInfo, vInfo) {\n\n        // TODO: We really need to do much more here... We need to be smarter about knowing\n        // which adaptation sets for which we have initialized, including the default key ID\n        // value from the ContentProtection elements so we know whether or not we still need to\n        // select key systems and acquire keys.\n        if (!initialized) {\n\n            let streamInfo;\n\n            if (!aInfo && !vInfo) {\n                // Look for ContentProtection elements.  InitData can be provided by either the\n                // dash264drm:Pssh ContentProtection format or a DRM-specific format.\n                streamInfo = adapter.getStreamsInfo()[0]; // TODO: Single period only for now. See TODO above\n            }\n\n            audioInfo = aInfo || (streamInfo ? adapter.getMediaInfoForType(streamInfo, Constants.AUDIO) : null);\n            videoInfo = vInfo || (streamInfo ? adapter.getMediaInfoForType(streamInfo, Constants.VIDEO) : null);\n            let mediaInfo = (videoInfo) ? videoInfo : audioInfo; // We could have audio or video only\n\n            // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio\n            // and video will be the same.  Just use one valid MediaInfo object\n            let supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);\n            if (supportedKS && supportedKS.length > 0) {\n                selectKeySystem(supportedKS, true);\n            }\n\n            initialized = true;\n        }\n    }\n\n    /**\n     * Create a new key session associated with the given initialization data from\n     * the MPD or from the PSSH box in the media\n     *\n     * @param {ArrayBuffer} initData the initialization data\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     * @todo In older versions of the EME spec, there was a one-to-one relationship between\n     * initialization data and key sessions.  That is no longer true in the latest APIs.  This\n     * API will need to modified (and a new \"generateRequest(keySession, initData)\" API created)\n     * to come up to speed with the latest EME standard\n     */\n    function createKeySession(initData) {\n        let initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, initData);\n        if (initDataForKS) {\n\n            // Check for duplicate initData\n            let currentInitData = protectionModel.getAllInitData();\n            for (let i = 0; i < currentInitData.length; i++) {\n                if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\n                    log('DRM: Ignoring initData because we have already seen it!');\n                    return;\n                }\n            }\n            try {\n                protectionModel.createKeySession(initDataForKS, sessionType);\n            } catch (error) {\n                eventBus.trigger(Events.KEY_SESSION_CREATED, {data: null, error: 'Error creating key session! ' + error.message});\n            }\n        } else {\n            eventBus.trigger(Events.KEY_SESSION_CREATED, {data: null, error: 'Selected key system is ' + keySystem.systemString + '.  needkey/encrypted event contains no initData corresponding to that key system!'});\n        }\n    }\n\n    /**\n     * Loads a key session with the given session ID from persistent storage.  This\n     * essentially creates a new key session\n     *\n     * @param {string} sessionID\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     */\n    function loadKeySession(sessionID) {\n        protectionModel.loadKeySession(sessionID);\n    }\n\n    /**\n     * Removes the given key session from persistent storage and closes the session\n     * as if {@link ProtectionController#closeKeySession}\n     * was called\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionRemoved\n     * @fires ProtectionController#KeySessionClosed\n     */\n    function removeKeySession(sessionToken) {\n        protectionModel.removeKeySession(sessionToken);\n    }\n\n    /**\n     * Closes the key session and releases all associated decryption keys.  These\n     * keys will no longer be available for decrypting media\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionClosed\n     */\n    function closeKeySession(sessionToken) {\n        protectionModel.closeKeySession(sessionToken);\n    }\n\n    /**\n     * Sets a server certificate for use by the CDM when signing key messages\n     * intended for a particular license server.  This will fire\n     * an error event if a key system has not yet been selected.\n     *\n     * @param {ArrayBuffer} serverCertificate a CDM-specific license server\n     * certificate\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#ServerCertificateUpdated\n     */\n    function setServerCertificate(serverCertificate) {\n        protectionModel.setServerCertificate(serverCertificate);\n    }\n\n    /**\n     * Associate this protection system with the given HTMLMediaElement.  This\n     * causes the system to register for needkey/encrypted events from the given\n     * element and provides a destination for setting of MediaKeys\n     *\n     * @param {HTMLMediaElement} element the media element to which the protection\n     * system should be associated\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setMediaElement(element) {\n        if (element) {\n            protectionModel.setMediaElement(element);\n            eventBus.on(Events.NEED_KEY, onNeedKey, this);\n            eventBus.on(Events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        } else if (element === null) {\n            protectionModel.setMediaElement(element);\n            eventBus.off(Events.NEED_KEY, onNeedKey, this);\n            eventBus.off(Events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        }\n    }\n\n    /**\n     * Sets the session type to use when creating key sessions.  Either \"temporary\" or\n     * \"persistent-license\".  Default is \"temporary\".\n     *\n     * @param {string} value the session type\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setSessionType(value) {\n        sessionType = value;\n    }\n\n    /**\n     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.\n     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.\n     *\n     * @param {string} level the robustness level\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setRobustnessLevel(level) {\n        robustnessLevel = level;\n    }\n\n    /**\n     * Attach KeySystem-specific data to use for license acquisition with EME\n     *\n     * @param {Object} data an object containing property names corresponding to\n     * key system name strings (e.g. \"org.w3.clearkey\") and associated values\n     * being instances of {@link ProtectionData}\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setProtectionData(data) {\n        protDataSet = data;\n        protectionKeyController.setProtectionData(data);\n    }\n\n    /**\n     * Destroys all protection data associated with this protection set.  This includes\n     * deleting all key sessions.  In the case of persistent key sessions, the sessions\n     * will simply be unloaded and not deleted.  Additionally, if this protection set is\n     * associated with a HTMLMediaElement, it will be detached from that element.\n     *\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function reset() {\n        setMediaElement(null);\n\n        keySystem = undefined;//TODO-Refactor look at why undefined is needed for this. refactor\n\n        if (protectionModel) {\n            protectionModel.reset();\n            protectionModel = null;\n        }\n    }\n\n    ///////////////\n    // Private\n    ///////////////\n\n    function getProtData(keySystem) {\n        let protData = null;\n        let keySystemString = keySystem.systemString;\n\n        if (protDataSet) {\n            protData = (keySystemString in protDataSet) ? protDataSet[keySystemString] : null;\n        }\n        return protData;\n    }\n\n    function getKeySystemConfiguration(keySystem) {\n        let protData = getProtData(keySystem);\n        let audioCapabilities = [];\n        let videoCapabilities = [];\n        let audioRobustness = (protData && protData.audioRobustness && protData.audioRobustness.length > 0) ? protData.audioRobustness : robustnessLevel;\n        let videoRobustness = (protData && protData.videoRobustness && protData.videoRobustness.length > 0) ? protData.videoRobustness : robustnessLevel;\n\n        if (audioInfo) {\n            audioCapabilities.push(new MediaCapability(audioInfo.codec, audioRobustness));\n        }\n        if (videoInfo) {\n            videoCapabilities.push(new MediaCapability(videoInfo.codec, videoRobustness));\n        }\n\n        return new KeySystemConfiguration(\n            audioCapabilities, videoCapabilities, 'optional',\n            (sessionType === 'temporary') ? 'optional' : 'required',\n            [sessionType]);\n    }\n\n    function selectKeySystem(supportedKS, fromManifest) {\n\n        let self = this;\n        let requestedKeySystems = [];\n\n        let ksIdx;\n        if (keySystem) {\n            // We have a key system\n            for (ksIdx = 0; ksIdx < supportedKS.length; ksIdx++) {\n                if (keySystem === supportedKS[ksIdx].ks) {\n\n                    requestedKeySystems.push({ks: supportedKS[ksIdx].ks, configs: [getKeySystemConfiguration(keySystem)]});\n\n                    // Ensure that we would be granted key system access using the key\n                    // system and codec information\n                    let onKeySystemAccessComplete = function (event) {\n                        eventBus.off(Events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                        if (event.error) {\n                            if (!fromManifest) {\n                                eventBus.trigger(Events.KEY_SYSTEM_SELECTED, {error: 'DRM: KeySystem Access Denied! -- ' + event.error});\n                            }\n                        } else {\n                            log('DRM: KeySystem Access Granted');\n                            eventBus.trigger(Events.KEY_SYSTEM_SELECTED, {data: event.data});\n                            createKeySession(supportedKS[ksIdx].initData);\n                        }\n                    };\n                    eventBus.on(Events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                    protectionModel.requestKeySystemAccess(requestedKeySystems);\n                    break;\n                }\n            }\n        }\n        else if (keySystem === undefined) {\n            // First time through, so we need to select a key system\n            keySystem = null;\n            pendingNeedKeyData.push(supportedKS);\n\n            // Add all key systems to our request list since we have yet to select a key system\n            for (let i = 0; i < supportedKS.length; i++) {\n                requestedKeySystems.push({ks: supportedKS[i].ks, configs: [getKeySystemConfiguration(supportedKS[i].ks)]});\n            }\n\n            let keySystemAccess;\n            const onKeySystemAccessComplete = function (event) {\n                eventBus.off(Events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                if (event.error) {\n                    keySystem = undefined;\n                    eventBus.off(Events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n\n                    if (!fromManifest) {\n                        eventBus.trigger(Events.KEY_SYSTEM_SELECTED, {data: null, error: 'DRM: KeySystem Access Denied! -- ' + event.error});\n                    }\n                } else {\n                    keySystemAccess = event.data;\n                    log('DRM: KeySystem Access Granted (' + keySystemAccess.keySystem.systemString + ')!  Selecting key system...');\n                    protectionModel.selectKeySystem(keySystemAccess);\n                }\n            };\n            var onKeySystemSelected = function (event) {\n                eventBus.off(Events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n                eventBus.off(Events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                if (!event.error) {\n                    keySystem = protectionModel.getKeySystem();\n                    eventBus.trigger(Events.KEY_SYSTEM_SELECTED, {data: keySystemAccess});\n                    // Set server certificate from protData\n                    let protData = getProtData(keySystem);\n                    if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {\n                        protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);\n                    }\n                    for (let i = 0; i < pendingNeedKeyData.length; i++) {\n                        for (ksIdx = 0; ksIdx < pendingNeedKeyData[i].length; ksIdx++) {\n                            if (keySystem === pendingNeedKeyData[i][ksIdx].ks) {\n                                createKeySession(pendingNeedKeyData[i][ksIdx].initData);\n                                break;\n                            }\n                        }\n                    }\n                } else {\n                    keySystem = undefined;\n                    if (!fromManifest) {\n                        eventBus.trigger(Events.KEY_SYSTEM_SELECTED, {data: null, error: 'DRM: Error selecting key system! -- ' + event.error});\n                    }\n                }\n            };\n            eventBus.on(Events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n            eventBus.on(Events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n            protectionModel.requestKeySystemAccess(requestedKeySystems);\n        } else {\n            // We are in the process of selecting a key system, so just save the data\n            pendingNeedKeyData.push(supportedKS);\n        }\n    }\n\n    function sendLicenseRequestCompleteEvent(data, error) {\n        eventBus.trigger(Events.LICENSE_REQUEST_COMPLETE, {data: data, error: error});\n    }\n\n    function onKeyMessage(e) {\n        log('DRM: onKeyMessage');\n        if (e.error) {\n            log(e.error);\n            return;\n        }\n\n        // Dispatch event to applications indicating we received a key message\n        let keyMessage = e.data;\n        eventBus.trigger(Events.KEY_MESSAGE, {data: keyMessage});\n        let messageType = (keyMessage.messageType) ? keyMessage.messageType : 'license-request';\n        let message = keyMessage.message;\n        let sessionToken = keyMessage.sessionToken;\n        let protData = getProtData(keySystem);\n        let keySystemString = keySystem.systemString;\n        let licenseServerData = protectionKeyController.getLicenseServer(keySystem, protData, messageType);\n        let eventData = { sessionToken: sessionToken, messageType: messageType };\n\n        // Message not destined for license server\n        if (!licenseServerData) {\n            log('DRM: License server request not required for this message (type = ' + e.data.messageType + ').  Session ID = ' + sessionToken.getSessionID());\n            sendLicenseRequestCompleteEvent(eventData);\n            return;\n        }\n\n        // Perform any special handling for ClearKey\n        if (protectionKeyController.isClearKey(keySystem)) {\n            let clearkeys = protectionKeyController.processClearKeyLicenseRequest(protData, message);\n            if (clearkeys)  {\n                log('DRM: ClearKey license request handled by application!');\n                sendLicenseRequestCompleteEvent(eventData);\n                protectionModel.updateKeySession(sessionToken, clearkeys);\n                return;\n            }\n        }\n\n        // All remaining key system scenarios require a request to a remote license server\n        // let xhr = new XMLHttpRequest(); // SEC_CLIENT_API_CHANGES\n\n        // Determine license server URL\n        let url = null;\n        if (protData && protData.serverURL) {\n            let serverURL = protData.serverURL;\n            if (typeof serverURL === 'string' && serverURL !== '') {\n                url = serverURL;\n            } else if (typeof serverURL === 'object' && serverURL.hasOwnProperty(messageType)) {\n                url = serverURL[messageType];\n            }\n        } else if (protData && protData.laURL && protData.laURL !== '') {\n            // TODO: Deprecated!\n            url = protData.laURL;\n        } else {\n            url = keySystem.getLicenseServerURLFromInitData(CommonEncryption.getPSSHData(sessionToken.initData));\n            if (!url) {\n                url = e.data.defaultURL;\n            }\n        }\n        // Possibly update or override the URL based on the message\n        url = licenseServerData.getServerURLFromMessage(url, message, messageType);\n\n        // TODO Temporary workaround for provisioning in Widevine DRM until EME v3\n        if (keySystemString === 'com.widevine.alpha') {\n            var msgString = String.fromCharCode.apply(null, new Uint8Array(message));\n            var xhrMsg = null;\n            var decoded_message = window.atob(msgString);\n\n            // Use the URL to decide if sending a license request or a provisioning request\n            if (url.includes('certificateprovisioning')) {\n                log('DRM [Widevine]: Sending message to ID server');\n                url = url + '&signedRequest=' + decoded_message;\n                messageType = 'provision-request';\n            } else {\n                log('DRM [Widevine]: Sending message to license server');\n                xhrMsg = message;\n            }\n\n            log('DRM [Widevine]: URL = ' + url);\n            log('DRM [Widevine]: message type = ' + messageType);\n        }\n\n        // Ensure valid license server URL\n        if (!url) {\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: No license server URL specified!');\n            return;\n        }\n\n        // Create args object for call to acquireLicense\n        var args = {};\n        args.keySystem = keySystemString;\n        args.licenseRequest = keySystem.getLicenseRequestFromMessage(message);\n        args.contentMetadata = keySystem.getLicenseServerURLFromInitData(CommonEncryption.getPSSHData(sessionToken.initData));\n        args.mediaUsage = 'stream';\n        args.context = context;\n\n        /*\n        xhr.open(licenseServerData.getHTTPMethod(messageType), url, true);\n        xhr.responseType = licenseServerData.getResponseType(keySystemString, messageType);\n        xhr.onload = function () {\n            // Received License Response\n            context.performance.markOnce(context.marks.END_SEND_LICENSE_REQUEST);\n            if (this.status == 200) {\n                sendLicenseRequestCompleteEvent(eventData);\n                protectionModel.updateKeySession(sessionToken,\n                licenseServerData.getLicenseMessage(this.response, keySystemString, messageType));\n            } else {\n                sendLicenseRequestCompleteEvent(eventData,\n                        'DRM: ' + keySystemString + ' update, XHR status is \"' + this.statusText + '\" (' + this.status +\n                        '), expected to be 200. readyState is ' + this.readyState +\n                        '.  Response is ' + ((this.response) ? licenseServerData.getErrorResponse(this.response, keySystemString, messageType) : 'NONE'));\n            }\n        };\n        xhr.onabort = function () {\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: ' + keySystemString + ' update, XHR aborted. status is \"' + this.statusText + '\" (' + this.status + '), readyState is ' + this.readyState);\n        };\n        xhr.onerror = function () {\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: ' + keySystemString + ' update, XHR error. status is \"' + this.statusText + '\" (' + this.status + '), readyState is ' + this.readyState);\n        };\n\n        // Set optional XMLHttpRequest headers from protection data and message\n        const updateHeaders = function (headers) {\n            let key;\n            if (headers) {\n                for (key in headers) {\n                    if ('authorization' === key.toLowerCase()) {\n                        xhr.withCredentials = true;\n                    }\n                    xhr.setRequestHeader(key, headers[key]);\n                }\n            }\n        };\n        if (protData) {\n            updateHeaders(protData.httpRequestHeaders);\n        }\n        updateHeaders(keySystem.getRequestHeadersFromMessage(message));\n\n        // Set withCredentials property from protData\n        if (protData && protData.withCredentials) {\n            xhr.withCredentials = true;\n        }\n        */\n\n        // Send License Request\n        context.performance.markOnce(context.marks.START_SEND_LICENSE_REQUEST);\n        acquireLicense(args).then( licObj => {\n            context.performance.markOnce(context.marks.END_SEND_LICENSE_REQUEST);\n            sendLicenseRequestCompleteEvent(eventData);\n            protectionModel.updateKeySession(sessionToken,\n                licenseServerData.getLicenseMessage(licObj.license, keySystemString, messageType));\n        })\n        .catch(function (err) {\n            context.performance.markOnce(context.marks.END_SEND_LICENSE_REQUEST);\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: ' + keySystemString + ' error = ' + err.toString());\n        });\n\n        /*\n        TODO: Add to Sec Client API???\n        var messageToSend = keySystem.getLicenseRequestFromMessage(message);\n        // TODO Temporary workaround for provisioning in Widevine DRM until EME v3\n        if (keySystemString === 'com.widevine.alpha') {\n            if (messageType === 'provision-request') {\n                log('DRM [Widevine]: Provision request being done via URL');\n                messageToSend = null;\n            }\n            else {\n                log('DRM [Widevine]: License request being sent');\n            }\n        }\n        */\n        /*\n        xhr.send(messageToSend);\n        */\n    }\n\n    function onNeedKey(event) {\n        log('DRM: onNeedKey');\n        // Ignore non-cenc initData\n        if (event.key.initDataType !== 'cenc') {\n            log('DRM:  Only \\'cenc\\' initData is supported!  Ignoring initData of type: ' + event.key.initDataType);\n            return;\n        }\n\n        // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).\n        // Convert to ArrayBuffer\n        let abInitData = event.key.initData;\n        if (ArrayBuffer.isView(abInitData)) {\n            abInitData = abInitData.buffer;\n        }\n\n        log('DRM: initData:', String.fromCharCode.apply(null, new Uint8Array(abInitData)));\n\n        let supportedKS = protectionKeyController.getSupportedKeySystems(abInitData, protDataSet);\n        if (supportedKS.length === 0) {\n            log('DRM: Received needkey event with initData, but we don\\'t support any of the key systems!');\n            return;\n        }\n\n        selectKeySystem(supportedKS, false);\n    }\n\n    instance = {\n        initialize: initialize,\n        createKeySession: createKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        setMediaElement: setMediaElement,\n        setSessionType: setSessionType,\n        setRobustnessLevel: setRobustnessLevel,\n        setProtectionData: setProtectionData,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nProtectionController.__dashjs_factory_name = 'ProtectionController';\nexport default FactoryMaker.getClassFactory(ProtectionController);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport CommonEncryption from './../CommonEncryption';\nimport KeySystemClearKey from './../drm/KeySystemClearKey';\nimport KeySystemWidevine from './../drm/KeySystemWidevine';\n//import KeySystemPlayReady from './../drm/KeySystemPlayReady';\nimport KeySystemPlayReadyComcast from './../drm/KeySystemPlayReadyComcast';\nimport DRMToday from './../servers/DRMToday';\nimport PlayReady from './../servers/PlayReady';\nimport Widevine from './../servers/Widevine';\nimport ClearKey from './../servers/ClearKey';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\n/**\n * @module ProtectionKeyController\n * @description Media protection key system functionality that can be modified/overridden by applications\n */\nfunction ProtectionKeyController() {\n\n    let context = this.context;\n\n    let instance,\n        log,\n        keySystems,\n        clearkeyKeySystem;\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.log) {\n            log = config.log;\n        }\n    }\n\n    function initialize() {\n        keySystems = [];\n\n        let keySystem;\n\n        // PlayReady\n        // TODO: Have some way to easily switch between Comcast PlayReady and Standard\n        //keySystem = KeySystemPlayReady(context).getInstance();\n        keySystem = KeySystemPlayReadyComcast(context).getInstance();\n        keySystems.push(keySystem);\n\n        // Widevine\n        keySystem = KeySystemWidevine(context).getInstance();\n        keySystems.push(keySystem);\n\n        // ClearKey\n        keySystem = KeySystemClearKey(context).getInstance();\n        keySystems.push(keySystem);\n        clearkeyKeySystem = keySystem;\n    }\n\n    /**\n     * Returns a prioritized list of key systems supported\n     * by this player (not necessarily those supported by the\n     * user agent)\n     *\n     * @returns {Array.<KeySystem>} a prioritized\n     * list of key systems\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystems() {\n        return keySystems;\n    }\n\n    /**\n     * Returns the key system associated with the given key system string\n     * name (i.e. 'org.w3.clearkey')\n     *\n     * @param {string} systemString the system string\n     * @returns {KeySystem|null} the key system\n     * or null if no supported key system is associated with the given key\n     * system string\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystemBySystemString(systemString) {\n        for (let i = 0; i < keySystems.length; i++) {\n            if (keySystems[i].systemString === systemString) {\n                return keySystems[i];\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Determines whether the given key system is ClearKey.  This is\n     * necessary because the EME spec defines ClearKey and its method\n     * for providing keys to the key session; and this method has changed\n     * between the various API versions.  Our EME-specific ProtectionModels\n     * must know if the system is ClearKey so that it can format the keys\n     * according to the particular spec version.\n     *\n     * @param {Object} keySystem the key\n     * @returns {boolean} true if this is the ClearKey key system, false\n     * otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function isClearKey(keySystem) {\n        return (keySystem === clearkeyKeySystem);\n    }\n\n    /**\n     * Check equality of initData array buffers.\n     *\n     * @param {ArrayBuffer} initData1 - first initData\n     * @param {ArrayBuffer} initData2 - second initData\n     * @returns {boolean} true if the initData arrays are equal in size and\n     * contents, false otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function initDataEquals(initData1, initData2) {\n        if (initData1.byteLength === initData2.byteLength) {\n            let data1 = new Uint8Array(initData1);\n            let data2 = new Uint8Array(initData2);\n\n            for (let j = 0; j < data1.length; j++) {\n                if (data1[j] !== data2[j]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        let cp, ks, ksIdx, cpIdx;\n        let supportedKS = [];\n\n        if (cps) {\n            for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n                ks = keySystems[ksIdx];\n                for (cpIdx = 0; cpIdx < cps.length; ++cpIdx) {\n                    cp = cps[cpIdx];\n                    if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {\n\n                        // Look for DRM-specific ContentProtection\n                        let initData = ks.getInitData(cp);\n                        if (!!initData) {\n                            supportedKS.push({\n                                ks: keySystems[ksIdx],\n                                initData: initData\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns key systems supported by this player for the given PSSH\n     * initializationData. Only key systems supported by this player\n     * that have protection data present will be returned.  Key systems are returned in priority order\n     * (highest priority first)\n     *\n     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs\n     * supported by the content\n     * @param {ProtectionData} protDataSet user specified protection data - license server url etc\n     * supported by the content\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystems(initData, protDataSet) {\n        let supportedKS = [];\n        let pssh = CommonEncryption.parsePSSHList(initData);\n\n        for (let ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n            let keySystemString = keySystems[ksIdx].systemString;\n            let shouldNotFilterOutKeySystem = (protDataSet) ? keySystemString in protDataSet : true;\n\n            if (keySystems[ksIdx].uuid in pssh && shouldNotFilterOutKeySystem) {\n                supportedKS.push({\n                    ks: keySystems[ksIdx],\n                    initData: pssh[keySystems[ksIdx].uuid]\n                });\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns the license server implementation data that should be used for this request.\n     *\n     * @param {KeySystem} keySystem the key system\n     * associated with this license request\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {string} [messageType=\"license-request\"] the message type associated with this\n     * request.  Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @returns {LicenseServer|null} the license server\n     * implementation that should be used for this request or null if the player should not\n     * pass messages of the given type to a license server\n     * @memberof module:ProtectionKeyController\n     * @instance\n     *\n     */\n    function getLicenseServer(keySystem, protData, messageType) {\n\n        // Our default server implementations do not do anything with \"license-release\" or\n        // \"individualization-request\" messages, so we just send a success event\n        if (messageType === 'license-release' || messageType === 'individualization-request') {\n            return null;\n        }\n\n        let licenseServerData = null;\n        if (protData && protData.hasOwnProperty('drmtoday')) {\n            licenseServerData = DRMToday(context).getInstance();\n        } else if (keySystem.systemString === 'com.widevine.alpha') {\n            licenseServerData = Widevine(context).getInstance();\n        } else if (keySystem.systemString === 'com.microsoft.playready') {\n            licenseServerData = PlayReady(context).getInstance();\n        } else if (keySystem.systemString === 'org.w3.clearkey') {\n            licenseServerData = ClearKey(context).getInstance();\n        }\n\n        return licenseServerData;\n    }\n\n    /**\n     * Allows application-specific retrieval of ClearKey keys.\n     *\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {ArrayBuffer} message the key message from the CDM\n     * @return {ClearKeyKeySet|null} the clear keys associated with\n     * the request or null if no keys can be returned by this function\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function processClearKeyLicenseRequest(protData, message) {\n        try {\n            return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);\n        } catch (error) {\n            log('Failed to retrieve clearkeys from ProtectionData');\n            return null;\n        }\n    }\n\n    function setProtectionData(protectionDataSet) {\n        var getProtectionData = function (keySystemString) {\n            var protData = null;\n            if (protectionDataSet) {\n                protData = (keySystemString in protectionDataSet) ? protectionDataSet[keySystemString] : null;\n            }\n            return protData;\n        };\n\n        for (var i = 0; i < keySystems.length; i++) {\n            var keySystem = keySystems[i];\n            if (keySystem.hasOwnProperty('init')) {\n                keySystem.init(getProtectionData(keySystem.systemString));\n            }\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        setProtectionData: setProtectionData,\n        isClearKey: isClearKey,\n        initDataEquals: initDataEquals,\n        getKeySystems: getKeySystems,\n        getKeySystemBySystemString: getKeySystemBySystemString,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getSupportedKeySystems: getSupportedKeySystems,\n        getLicenseServer: getLicenseServer,\n        processClearKeyLicenseRequest: processClearKeyLicenseRequest,\n        setConfig: setConfig\n    };\n\n    return instance;\n}\n\nProtectionKeyController.__dashjs_factory_name = 'ProtectionKeyController';\nexport default FactoryMaker.getSingletonFactory(ProtectionKeyController);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nconst uuid = '1077efec-c0b2-4d02-ace3-3c1e52e2fb4b';\nconst systemString = 'org.w3.clearkey';\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemClearKey() {\n\n    let instance;\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionData} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            let jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            let keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                let clearkeyID = jsonMsg.kids[i];\n                let clearkey = (protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp);\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemClearKey.__dashjs_factory_name = 'KeySystemClearKey';\nexport default FactoryMaker.getSingletonFactory(KeySystemClearKey);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Microsoft PlayReady DRM\n *\n * @class\n * @implements KeySystem\n */\nimport CommonEncryption from '../CommonEncryption';\n\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport BASE64 from '../../../../externals/base64';\n\nvar Base64 = require('base64-js');\n\nconst uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\nconst systemString = 'com.microsoft.playready';\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemPlayReadyComcast() {\n\n    let instance;\n    let messageFormat = 'utf16';\n\n    function stringMessage(message) {\n        return String.fromCharCode.apply(null, new Uint8Array(message));\n    }\n\n    function getRequestHeadersFromMessage() {\n        var parentId = Math.floor(Math.random() * (Math.floor(2147483647) - Math.ceil(-2147483647)) + Math.ceil(-2147483647));\n        var known_headers = {\n            'Accept': 'application/vnd.xcal.mds.licenseResponse+json; version=1',\n            'Content-Type': 'application/vnd.xcal.mds.licenseRequest+json; version=1',\n            'X-MoneyTrace': 'trace-id=0ca50bd5-116c-49ea-8d1f-df8a934b8cc8-1;' + 'parent-id=0' + ';span-id=' + parentId\n        };\n\n        return known_headers;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        var msg = stringMessage(message);\n        console.log('[COMCAST] eme:playready:req=' + msg);\n\n        return Base64.fromByteArray(new Uint8Array(message));\n    }\n\n    function getLicenseServerURLFromInitData(initData) {\n        if (initData) {\n            let data = new DataView(initData);\n            let numRecords = data.getUint16(4, true);\n            let offset = 6;\n            let parser = new DOMParser();\n\n            for (let i = 0; i < numRecords; i++) {\n                // Parse the PlayReady Record header\n                let recordType = data.getUint16(offset, true);\n                offset += 2;\n                let recordLength = data.getUint16(offset, true);\n                offset += 2;\n                if (recordType !== 0x0001) {\n                    offset += recordLength;\n                    continue;\n                }\n\n                let recordData = initData.slice(offset, offset + recordLength);\n                let record = String.fromCharCode.apply(null, new Uint16Array(recordData));\n                let xmlDoc = parser.parseFromString(record, 'application/xml');\n\n                var policy = xmlDoc.getElementsByTagNameNS('urn:ccp:ckm', 'policy')[0];\n                var ckm_policy = btoa(policy.textContent);\n                return ckm_policy;\n            }\n        }\n\n        return null;\n    }\n\n    function getInitData(cpData) {\n        // * desc@ getInitData\n        // *   generate PSSH data from PROHeader defined in MPD file\n        // *   PSSH format:\n        // *   size (4)\n        // *   box type(PSSH) (8)\n        // *   Protection SystemID (16)\n        // *   protection system data size (4) - length of decoded PROHeader\n        // *   decoded PROHeader data from MPD file\n        let PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\n        let playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\n\n        let byteCursor = 0;\n        let uint8arraydecodedPROHeader = null;\n\n        let PROSize,\n            PSSHSize,\n            PSSHBoxBuffer,\n            PSSHBox,\n            PSSHData;\n\n        // Handle common encryption PSSH\n        if ('pssh' in cpData) {\n            return CommonEncryption.parseInitDataFromContentProtection(cpData);\n        }\n        // Handle native MS PlayReady ContentProtection elements\n        if ('pro' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\n        }\n        else if ('prheader' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\n        }\n        else {\n            return null;\n        }\n\n        PROSize = uint8arraydecodedPROHeader.length;\n        PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\n\n        PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\n\n        PSSHBox = new Uint8Array(PSSHBoxBuffer);\n        PSSHData = new DataView(PSSHBoxBuffer);\n\n        PSSHData.setUint32(byteCursor, PSSHSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(PSSHBoxType, byteCursor);\n        byteCursor += PSSHBoxType.length;\n\n        PSSHBox.set(playreadySystemID, byteCursor);\n        byteCursor += playreadySystemID.length;\n\n        PSSHData.setUint32(byteCursor, PROSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\n        byteCursor += PROSize;\n\n        return PSSHBox.buffer;\n    }\n\n    /**\n     * It seems that some PlayReady implementations return their XML-based CDM\n     * messages using UTF16, while others return them as UTF8.  Use this function\n     * to modify the message format to expect when parsing CDM messages.\n     *\n     * @param {string} format the expected message format.  Either \"utf8\" or \"utf16\".\n     * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\n     */\n    function setPlayReadyMessageFormat(format) {\n        if (format !== 'utf8' && format !== 'utf16') {\n            throw new Error('Illegal PlayReady message format! -- ' + format);\n        }\n        messageFormat = format;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        stringMessage: stringMessage,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        setPlayReadyMessageFormat: setPlayReadyMessageFormat\n    };\n\n    return instance;\n}\n\nKeySystemPlayReadyComcast.__dashjs_factory_name = 'KeySystemPlayReadyComcast';\nexport default FactoryMaker.getSingletonFactory(KeySystemPlayReadyComcast);","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Google Widevine DRM\n *\n * @class\n * @implements MediaPlayer.dependencies.protection.KeySystem\n */\n\nimport CommonEncryption from '../CommonEncryption';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nconst uuid = 'edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\nconst systemString = 'com.widevine.alpha';\nconst schemeIdURI = 'urn:uuid:' + uuid;\nimport BASE64 from '../../../../externals/base64';\n\nfunction KeySystemWidevine() {\n\n    let instance;\n    let messageFormat = 'utf8';\n    let protData = null;\n\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n    function replaceKID(pssh, KID) {\n        let pssh_array;\n        let replace = true;\n        let kidLen = 16;\n        let pos;\n        let i, j;\n\n        pssh_array = new Uint8Array(pssh);\n\n        for (i = 0; i <= pssh_array.length - (kidLen + 2); i++) {\n            if (pssh_array[i] === 0x12 && pssh_array[i + 1] === 0x10) {\n                pos = i + 2;\n                for (j = pos; j < (pos + kidLen); j++) {\n                    if (pssh_array[j] !== 0xFF) {\n                        replace = false;\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n\n        if (replace) {\n            pssh_array.set(KID, pos);\n        }\n\n        return pssh_array.buffer;\n    }\n\n    function getInitData(cp) {\n        var pssh = null;\n        // Get pssh from protectionData or from manifest\n        if (protData && protData.pssh) {\n            pssh = BASE64.decodeArray(protData.pssh).buffer;\n        } else {\n            pssh = CommonEncryption.parseInitDataFromContentProtection(cp);\n        }\n\n        // Check if KID within pssh is empty, in that case set KID value according to 'cenc:default_KID' value\n        if (pssh) {\n            pssh = replaceKID(pssh, cp['cenc:default_KID']);\n        }\n\n        return pssh;\n    }\n\n    function getRequestHeadersFromMessage( /*message*/ ) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        var dataview = messageFormat === 'utf16' ? new Uint16Array(message) : new Uint8Array(message);\n\n        var b64msg = String.fromCharCode.apply(null, dataview);\n        var msg = window.atob(b64msg);\n        var byteNumbers = new Array(msg.length);\n        for (var i = 0; i < msg.length; i++) {\n            byteNumbers[i] = msg.charCodeAt(i);\n        }\n        var byteArray = new Uint8Array(byteNumbers);\n        return byteArray;\n    }\n\n    function getLicenseServerURLFromInitData( /*initData*/ ) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        init: init,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData\n    };\n\n    return instance;\n}\n\nKeySystemWidevine.__dashjs_factory_name = 'KeySystemWidevine';\nexport default FactoryMaker.getSingletonFactory(KeySystemWidevine);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Initial implementation of EME\n *\n * Implemented by Google Chrome prior to v36\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport KeyError from '../vo/KeyError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\nimport Events from '../../../core/events/Events';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction ProtectionModel_01b(config) {\n\n    let context = this.context;\n    let eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    let log = config.log;\n    let api = config.api;\n    let errHandler = config.errHandler;\n\n    let instance,\n        videoElement,\n        keySystem,\n        protectionKeyController,\n\n        // With this version of the EME APIs, sessionIDs are not assigned to\n        // sessions until the first key message is received.  We are assuming\n        // that in the case of multiple sessions, key messages will be received\n        // in the order that generateKeyRequest() is called.\n        // Holding spot for newly-created sessions until we determine whether or\n        // not the CDM supports sessionIDs\n        pendingSessions,\n\n        // List of sessions that have been initialized.  Only the first position will\n        // be used in the case that the CDM does not support sessionIDs\n        sessions,\n\n        // Not all CDMs support the notion of sessionIDs.  Without sessionIDs\n        // there is no way for us to differentiate between sessions, therefore\n        // we must only allow a single session.  Once we receive the first key\n        // message we can set this flag to determine if more sessions are allowed\n        moreSessionsAllowed,\n\n        // This is our main event handler for all desired HTMLMediaElement events\n        // related to EME.  These events are translated into our API-independent\n        // versions of the same events\n        eventHandler;\n\n    function setup() {\n        videoElement = null;\n        keySystem = null;\n        pendingSessions = [];\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        if (videoElement) {\n            removeEventListeners();\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            closeKeySession(sessions[i]);\n        }\n        eventBus.trigger(Events.TEARDOWN_COMPLETE);\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        let retVal = [];\n        for (let i = 0; i < pendingSessions.length; i++) {\n            retVal.push(pendingSessions[i].initData);\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        let ve = videoElement;\n        if (!ve) { // Must have a video element to do this capability tests\n            ve = document.createElement('video');\n        }\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            let systemString = ksConfigurations[ksIdx].ks.systemString;\n            let configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                //let audios = configs[configIdx].audioCapabilities;\n                let videos = configs[configIdx].videoCapabilities;\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (ve.canPlayType(videos[videoIdx].contentType, systemString) !== '') {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                let ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                let ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(Events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(Events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied! -- No valid audio/video content configurations detected!'});\n        }\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystem = keySystemAccess.keySystem;\n        eventBus.trigger(Events.INTERNAL_KEY_SYSTEM_SELECTED);\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement) {\n            return;\n        }\n\n        // Replacing the previous element\n        if (videoElement) {\n            removeEventListeners();\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.keyerror, eventHandler);\n            videoElement.addEventListener(api.needkey, eventHandler);\n            videoElement.addEventListener(api.keymessage, eventHandler);\n            videoElement.addEventListener(api.keyadded, eventHandler);\n            eventBus.trigger(Events.VIDEO_ELEMENT_SELECTED);\n        }\n    }\n\n    function createKeySession(initData /*, keySystemType */) {\n\n        if (!keySystem) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Determine if creating a new session is allowed\n        if (moreSessionsAllowed || sessions.length === 0) {\n\n            let newSession = { // Implements SessionToken\n                sessionID: null,\n                initData: initData,\n                getSessionID: function () {\n                    return this.sessionID;\n                },\n\n                getExpirationTime: function () {\n                    return NaN;\n                },\n\n                getSessionType: function () {\n                    return 'temporary';\n                }\n            };\n            pendingSessions.push(newSession);\n\n            // Send our request to the CDM\n            context.performance.markOnce(context.marks.START_GENERATE_KEY_REQUEST);\n            videoElement[api.generateKeyRequest](keySystem.systemString, new Uint8Array(initData));\n\n            return newSession;\n\n        } else {\n            throw new Error('Multiple sessions not allowed!');\n        }\n\n    }\n\n    function updateKeySession(sessionToken, message) {\n        let sessionID = sessionToken.sessionID;\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the CDM\n            context.performance.markOnce(context.marks.ADD_KEY);\n            videoElement[api.addKey](keySystem.systemString,\n                new Uint8Array(message), new Uint8Array(sessionToken.initData), sessionID);\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            context.performance.markOnce(context.marks.ADD_KEY);\n            for (let i = 0; i < message.keyPairs.length; i++) {\n                videoElement[api.addKey](keySystem.systemString,\n                    message.keyPairs[i].key, message.keyPairs[i].keyID, sessionID);\n            }\n        }\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the CDM\n        videoElement[api.cancelKeyRequest](keySystem.systemString, sessionToken.sessionID);\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                let sessionToken = null;\n                switch (event.type) {\n\n                    case api.needkey:\n                        context.performance.markOnce(context.marks.EVENT_NEEDKEY);\n                        let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                        eventBus.trigger(Events.NEED_KEY, {key: new NeedKey(initData, 'cenc')});\n                        break;\n\n                    case api.keyerror:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            let msg = '';\n                            switch (event.errorCode.code) {\n                                case 1:\n                                    msg += 'MEDIA_KEYERR_UNKNOWN - An unspecified error occurred. This value is used for errors that don\\'t match any of the other codes.';\n                                    break;\n                                case 2:\n                                    msg += 'MEDIA_KEYERR_CLIENT - The Key System could not be installed or updated.';\n                                    break;\n                                case 3:\n                                    msg += 'MEDIA_KEYERR_SERVICE - The message passed into update indicated an error from the license service.';\n                                    break;\n                                case 4:\n                                    msg += 'MEDIA_KEYERR_OUTPUT - There is no available output device with the required characteristics for the content protection system.';\n                                    break;\n                                case 5:\n                                    msg += 'MEDIA_KEYERR_HARDWARECHANGE - A hardware configuration change caused a content protection error.';\n                                    break;\n                                case 6:\n                                    msg += 'MEDIA_KEYERR_DOMAIN - An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.';\n                                    break;\n                            }\n                            msg += '  System Code = ' + event.systemCode;\n                            // TODO: Build error string based on key error\n                            eventBus.trigger(Events.KEY_ERROR, {data: new KeyError(sessionToken, msg)});\n                        } else {\n                            log('No session token found for key error');\n                        }\n                        break;\n\n                    case api.keyadded:\n                        context.performance.markOnce(context.marks.EVENT_ADDKEY);\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            log('DRM: Key added.');\n                            eventBus.trigger(Events.KEY_ADDED, {data: sessionToken});//TODO not sure anything is using sessionToken? why there?\n                        } else {\n                            log('No session token found for key added');\n                        }\n                        break;\n\n                    case api.keymessage:\n                        context.performance.markOnce(context.marks.END_GENERATE_KEY_REQUEST);\n\n                        // If this CDM does not support session IDs, we will be limited\n                        // to a single session\n                        moreSessionsAllowed = (event.sessionId !== null) && (event.sessionId !== undefined);\n\n                        // SessionIDs supported\n                        if (moreSessionsAllowed) {\n\n                            // Attempt to find an uninitialized token with this sessionID\n                            sessionToken = findSessionByID(sessions, event.sessionId);\n                            if (!sessionToken && pendingSessions.length > 0) {\n\n                                // This is the first message for our latest session, so set the\n                                // sessionID and add it to our list\n                                sessionToken = pendingSessions.shift();\n                                sessions.push(sessionToken);\n                                sessionToken.sessionID = event.sessionId;\n                            }\n                        } else if (pendingSessions.length > 0) { // SessionIDs not supported\n\n                            sessionToken = pendingSessions.shift();\n                            sessions.push(sessionToken);\n\n                            if (pendingSessions.length !== 0) {\n                                errHandler.mediaKeyMessageError('Multiple key sessions were creates with a user-agent that does not support sessionIDs!! Unpredictable behavior ahead!');\n                            }\n                        }\n\n                        if (sessionToken) {\n                            let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n\n                            // For ClearKey, the spec mandates that you pass this message to the\n                            // addKey method, so we always save it to the token since there is no\n                            // way to tell which key system is in use\n                            sessionToken.keyMessage = message;\n                            eventBus.trigger(Events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(sessionToken, message, event.defaultURL)});\n\n                        } else {\n                            log('No session token found for key message');\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    /**\n     * Helper function to retrieve the stored session token based on a given\n     * sessionID value\n     *\n     * @param {Array} sessionArray - the array of sessions to search\n     * @param {*} sessionID - the sessionID to search for\n     * @returns {*} the session token with the given sessionID\n     */\n    function findSessionByID(sessionArray, sessionID) {\n\n        if (!sessionID || !sessionArray) {\n            return null;\n        } else {\n            const len = sessionArray.length;\n            for (let i = 0; i < len; i++) {\n                if (sessionArray[i].sessionID == sessionID) {\n                    return sessionArray[i];\n                }\n            }\n            return null;\n        }\n    }\n\n    function removeEventListeners() {\n        videoElement.removeEventListener(api.keyerror, eventHandler);\n        videoElement.removeEventListener(api.needkey, eventHandler);\n        videoElement.removeEventListener(api.keymessage, eventHandler);\n        videoElement.removeEventListener(api.keyadded, eventHandler);\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_01b.__dashjs_factory_name = 'ProtectionModel_01b';\nexport default FactoryMaker.getClassFactory(ProtectionModel_01b);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Most recent EME implementation\n *\n * Implemented by Google Chrome v36+ (Windows, OSX, Linux)\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport KeyError from '../vo/KeyError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemAccess from '../vo/KeySystemAccess';\nimport Events from '../../../core/events/Events';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction ProtectionModel_21Jan2015(config) {\n\n    let context = this.context;\n    let eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    let log = config.log;\n\n    let instance,\n        keySystem,\n        videoElement,\n        mediaKeys,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        keySystem = null;\n        videoElement = null;\n        mediaKeys = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        const numSessions = sessions.length;\n        let session;\n\n        if (numSessions !== 0) {\n            // Called when we are done closing a session.  Success or fail\n            const done = function (session) {\n                removeSession(session);\n                if (sessions.length === 0) {\n                    if (videoElement) {\n                        videoElement.removeEventListener('encrypted', eventHandler);\n                        videoElement.setMediaKeys(null).then(function () {\n                            eventBus.trigger(Events.TEARDOWN_COMPLETE);\n                        });\n                    } else {\n                        eventBus.trigger(Events.TEARDOWN_COMPLETE);\n                    }\n                }\n            };\n            for (let i = 0; i < numSessions; i++) {\n                session = sessions[i];\n                (function (s) {\n                    // Override closed promise resolver\n                    session.session.closed.then(function () {\n                        done(s);\n                    });\n                    // Close the session and handle errors, otherwise promise\n                    // resolver above will be called\n                    closeKeySessionInternal(session).catch(function () {\n                        done(s);\n                    });\n\n                })(session);\n            }\n        } else {\n            eventBus.trigger(Events.TEARDOWN_COMPLETE);\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        let retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        requestKeySystemAccessInternal(ksConfigurations, 0);\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        context.performance.markOnce(context.marks.START_CREATE_MEDIA_KEYS);\n        keySystemAccess.mksa.createMediaKeys().then(function (mkeys) {\n            context.performance.markOnce(context.marks.END_CREATE_MEDIA_KEYS);\n            keySystem = keySystemAccess.keySystem;\n            mediaKeys = mkeys;\n            if (videoElement) {\n                videoElement.setMediaKeys(mediaKeys).then(function () {\n                    eventBus.trigger(Events.INTERNAL_KEY_SYSTEM_SELECTED);\n                });\n            }\n\n        }).catch(function () {\n            eventBus.trigger(Events.INTERNAL_KEY_SYSTEM_SELECTED, {error: 'Error selecting keys system (' + keySystemAccess.keySystem.systemString + ')! Could not create MediaKeys -- TODO'});\n        });\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener('encrypted', eventHandler);\n            videoElement.setMediaKeys(null);\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener('encrypted', eventHandler);\n            if (mediaKeys) {\n                videoElement.setMediaKeys(mediaKeys);\n            }\n        }\n    }\n\n    function setServerCertificate(serverCertificate) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not set server certificate until you have selected a key system');\n        }\n        mediaKeys.setServerCertificate(serverCertificate).then(function () {\n            log('DRM: License server certificate successfully updated.');\n            eventBus.trigger(Events.SERVER_CERTIFICATE_UPDATED);\n        }).catch(function (error) {\n            eventBus.trigger(Events.SERVER_CERTIFICATE_UPDATED, {error: 'Error updating server certificate -- ' + error.name});\n        });\n    }\n\n    function createKeySession(initData, sessionType) {\n\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        context.performance.markOnce(context.marks.START_CREATE_SESSION);\n        let session = mediaKeys.createSession(sessionType);\n        context.performance.markOnce(context.marks.END_CREATE_SESSION);\n\n        let sessionToken = createSessionToken(session, initData, sessionType);\n\n        // Generate initial key request\n        context.performance.markOnce(context.marks.START_GENERATE_LICENSE_REQUEST);\n        session.generateRequest('cenc', initData).then(function () {\n            log('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(Events.KEY_SESSION_CREATED, {data: sessionToken});\n        }).catch(function (error) {\n            // TODO: Better error string\n            removeSession(sessionToken);\n            eventBus.trigger(Events.KEY_SESSION_CREATED, {data: null, error: 'Error generating key request -- ' + error.name});\n        });\n    }\n\n    function updateKeySession(sessionToken, message) {\n\n        let session = sessionToken.session;\n\n        // Send our request to the key session\n        if (protectionKeyController.isClearKey(keySystem)) {\n            message = message.toJWK();\n        }\n\n        // Send License to CDM\n        context.performance.markOnce(context.marks.UPDATE_MEDIA_KEY_SESSION);\n        session.update(message).catch(function (error) {\n            eventBus.trigger(Events.KEY_ERROR, {data: new KeyError(sessionToken, 'Error sending update() message! ' + error.name)});\n        });\n    }\n\n    function loadKeySession(sessionID) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not load sessions until you have selected a key system');\n        }\n\n        let session = mediaKeys.createSession();\n\n        // Load persisted session data into our newly created session object\n        session.load(sessionID).then(function (success) {\n            if (success) {\n                let sessionToken = createSessionToken(session);\n                log('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n                eventBus.trigger(Events.KEY_SESSION_CREATED, {data: sessionToken});\n            } else {\n                eventBus.trigger(Events.KEY_SESSION_CREATED, {data: null, error: 'Could not load session! Invalid Session ID (' + sessionID + ')'});\n            }\n        }).catch(function (error) {\n            eventBus.trigger(Events.KEY_SESSION_CREATED, {data: null, error: 'Could not load session (' + sessionID + ')! ' + error.name});\n        });\n    }\n\n    function removeKeySession(sessionToken) {\n        let session = sessionToken.session;\n\n        session.remove().then(function () {\n            log('DRM: Session removed.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(Events.KEY_SESSION_REMOVED, {data: sessionToken.getSessionID()});\n        }, function (error) {\n            eventBus.trigger(Events.KEY_SESSION_REMOVED, {data: null, error: 'Error removing session (' + sessionToken.getSessionID() + '). ' + error.name});\n\n        });\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the key session\n        closeKeySessionInternal(sessionToken).catch(function (error) {\n            removeSession(sessionToken);\n            eventBus.trigger(Events.KEY_SESSION_CLOSED, {data: null, error: 'Error closing session (' + sessionToken.getSessionID() + ') ' + error.name});\n        });\n    }\n\n    function requestKeySystemAccessInternal(ksConfigurations, idx) {\n        (function (i) {\n            let keySystem = ksConfigurations[i].ks;\n            let configs = ksConfigurations[i].configs;\n            context.performance.markOnce(context.marks.START_REQUEST_MEDIA_KEY_ACCESS);\n            navigator.requestMediaKeySystemAccess(keySystem.systemString, configs).then(function (mediaKeySystemAccess) {\n                context.performance.markOnce(context.marks.END_REQUEST_MEDIA_KEY_ACCESS);\n                // Chrome 40 does not currently implement MediaKeySystemAccess.getConfiguration()\n                let configuration = (typeof mediaKeySystemAccess.getConfiguration === 'function') ?\n                        mediaKeySystemAccess.getConfiguration() : null;\n                let keySystemAccess = new KeySystemAccess(keySystem, configuration);\n                keySystemAccess.mksa = mediaKeySystemAccess;\n                eventBus.trigger(Events.KEY_SYSTEM_ACCESS_COMPLETE, {data: keySystemAccess});\n\n            }).catch(function () {\n                if (++i < ksConfigurations.length) {\n                    requestKeySystemAccessInternal(ksConfigurations, i);\n                } else {\n                    eventBus.trigger(Events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied!'});\n                }\n            });\n        })(idx);\n    }\n\n    function closeKeySessionInternal(sessionToken) {\n        let session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener('keystatuseschange', sessionToken);\n        session.removeEventListener('message', sessionToken);\n\n        // Send our request to the key session\n        return session.close();\n    }\n\n    // This is our main event handler for all desired HTMLMediaElement events\n    // related to EME.  These events are translated into our API-independent\n    // versions of the same events\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case 'encrypted':\n                        context.performance.markOnce(context.marks.EVENT_ENCRYPTED);\n                        if (event.initData) {\n                            let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(Events.NEED_KEY, {key: new NeedKey(initData, event.initDataType)});\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n    function removeSession(token) {\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === token) {\n                sessions.splice(i,1);\n                break;\n            }\n        }\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(session, initData, sessionType) {\n\n        let token = { // Implements SessionToken\n            session: session,\n            initData: initData,\n\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case 'keystatuseschange':\n                        eventBus.trigger(Events.KEY_STATUSES_CHANGED, {data: this});\n                        break;\n\n                    case 'message':\n                        context.performance.markOnce(context.marks.END_GENERATE_LICENSE_REQUEST);\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(Events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(this, message, undefined, event.messageType)});\n                        break;\n                }\n            },\n\n            getSessionID: function () {\n                return session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return session.expiration;\n            },\n\n            getKeyStatuses: function () {\n                return session.keyStatuses;\n            },\n\n            getSessionType: function () {\n                return sessionType;\n            }\n        };\n\n        // Add all event listeners\n        session.addEventListener('keystatuseschange', token);\n        session.addEventListener('message', token);\n\n        // Register callback for session closed Promise\n        session.closed.then(function () {\n            removeSession(token);\n            log('DRM: Session closed.  SessionID = ' + token.getSessionID());\n            eventBus.trigger(Events.KEY_SESSION_CLOSED, {data: token.getSessionID()});\n        });\n\n        // Add to our session list\n        sessions.push(token);\n\n        return token;\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        setServerCertificate: setServerCertificate,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_21Jan2015.__dashjs_factory_name = 'ProtectionModel_21Jan2015';\nexport default FactoryMaker.getClassFactory(ProtectionModel_21Jan2015);","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Implementation of the EME APIs as of the 3 Feb 2014 state of the specification.\n *\n * Implemented by Internet Explorer 11 (Windows 8.1)\n *\n * @implements ProtectionModel\n * @class\n */\n\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport KeyError from '../vo/KeyError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\nimport Events from '../../../core/events/Events';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction ProtectionModel_3Feb2014(config) {\n\n    let context = this.context;\n    let eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    let log = config.log;\n    let api = config.api;\n\n\n    let instance,\n        videoElement,\n        keySystem,\n        mediaKeys,\n        keySystemAccess,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        videoElement = null;\n        keySystem = null;\n        mediaKeys = null;\n        keySystemAccess = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        try {\n            for (let i = 0; i < sessions.length; i++) {\n                closeKeySession(sessions[i]);\n            }\n            if (videoElement) {\n                videoElement.removeEventListener(api.needkey, eventHandler);\n            }\n            eventBus.trigger(Events.TEARDOWN_COMPLETE);\n        } catch (error) {\n            eventBus.trigger(Events.TEARDOWN_COMPLETE, {error: 'Error tearing down key sessions and MediaKeys! -- ' + error.message});\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        let retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            let systemString = ksConfigurations[ksIdx].ks.systemString;\n            let configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                let audios = configs[configIdx].audioCapabilities;\n                let videos = configs[configIdx].videoCapabilities;\n\n                // Look for supported audio container/codecs\n                if (audios && audios.length !== 0) {\n                    supportedAudio = []; // Indicates that we have a requested audio config\n                    for (let audioIdx = 0; audioIdx < audios.length; audioIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, audios[audioIdx].contentType)) {\n                            supportedAudio.push(audios[audioIdx]);\n                        }\n                    }\n                }\n\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, videos[videoIdx].contentType)) {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                let ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                let ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(Events.KEY_SYSTEM_ACCESS_COMPLETE, {data: new KeySystemAccess(ks, ksConfig)});\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(Events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied! -- No valid audio/video content configurations detected!'});\n        }\n    }\n\n    function selectKeySystem(ksAccess) {\n        try {\n            mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString);\n            keySystem = ksAccess.keySystem;\n            keySystemAccess = ksAccess;\n            if (videoElement) {\n                setMediaKeys();\n            }\n            eventBus.trigger(Events.INTERNAL_KEY_SYSTEM_SELECTED);\n        } catch (error) {\n            eventBus.trigger(Events.INTERNAL_KEY_SYSTEM_SELECTED, {error: 'Error selecting keys system (' + keySystem.systemString + ')! Could not create MediaKeys -- TODO'});\n        }\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener(api.needkey, eventHandler);\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.needkey, eventHandler);\n            if (mediaKeys) {\n                setMediaKeys();\n            }\n        }\n    }\n\n    function createKeySession(initData /*, keySystemType */) {\n\n        if (!keySystem || !mediaKeys || !keySystemAccess) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Use the first video capability for the contentType.\n        // TODO:  Not sure if there is a way to concatenate all capability data into a RFC6386-compatible format\n\n        // If player is trying to playback Audio only stream - don't error out.\n        let capabilities = null;\n\n        if (keySystemAccess.ksConfiguration.videoCapabilities !== null && keySystemAccess.ksConfiguration.videoCapabilities.length > 0)\n          capabilities = keySystemAccess.ksConfiguration.videoCapabilities[0];\n\n        if (capabilities === null && keySystemAccess.ksConfiguration.audioCapabilities !== null && keySystemAccess.ksConfiguration.audioCapabilities.length > 0)\n          capabilities = keySystemAccess.ksConfiguration.audioCapabilities[0];\n\n        if (capabilities === null)\n          throw new Error('Can not create sessions for unknown content types.');\n\n        let contentType = capabilities.contentType;\n        let session = mediaKeys.createSession(contentType, new Uint8Array(initData));\n        let sessionToken = createSessionToken(session, initData);\n\n        // Add all event listeners\n        session.addEventListener(api.error, sessionToken);\n        session.addEventListener(api.message, sessionToken);\n        session.addEventListener(api.ready, sessionToken);\n        session.addEventListener(api.close, sessionToken);\n\n        // Add to our session list\n        sessions.push(sessionToken);\n        log('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n        eventBus.trigger(Events.KEY_SESSION_CREATED, {data: sessionToken});\n    }\n\n    function updateKeySession(sessionToken, message) {\n\n        let session = sessionToken.session;\n\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the key session\n            session.update(new Uint8Array(message));\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            session.update(new Uint8Array(message.toJWK()));\n        }\n    }\n\n    /**\n     * Close the given session and release all associated keys.  Following\n     * this call, the sessionToken becomes invalid\n     *\n     * @param {Object} sessionToken - the session token\n     */\n    function closeKeySession(sessionToken) {\n\n        let session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener(api.error, sessionToken);\n        session.removeEventListener(api.message, sessionToken);\n        session.removeEventListener(api.ready, sessionToken);\n        session.removeEventListener(api.close, sessionToken);\n\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === sessionToken) {\n                sessions.splice(i,1);\n                break;\n            }\n        }\n\n        // Send our request to the key session\n        session[api.release]();\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case api.needkey:\n                        if (event.initData) {\n                            let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(Events.NEED_KEY, {key: new NeedKey(initData, 'cenc')});\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    // IE11 does not let you set MediaKeys until it has entered a certain\n    // readyState, so we need this logic to ensure we don't set the keys\n    // too early\n    function setMediaKeys() {\n        let boundDoSetKeys = null;\n        const doSetKeys = function () {\n            videoElement.removeEventListener('loadedmetadata', boundDoSetKeys);\n            videoElement[api.setMediaKeys](mediaKeys);\n            eventBus.trigger(Events.VIDEO_ELEMENT_SELECTED);\n        };\n        if (videoElement.readyState >= 1) {\n            doSetKeys();\n        } else {\n            boundDoSetKeys = doSetKeys.bind(this);\n            videoElement.addEventListener('loadedmetadata', boundDoSetKeys);\n        }\n\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(keySession, initData) {\n        return {\n            // Implements SessionToken\n            session: keySession,\n            initData: initData,\n\n            getSessionID: function () {\n                return this.session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return NaN;\n            },\n\n            getSessionType: function () {\n                return 'temporary';\n            },\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case api.error:\n                        let errorStr = 'KeyError'; // TODO: Make better string from event\n                        eventBus.trigger(Events.KEY_ERROR, { data: new KeyError(this, errorStr) });\n                        break;\n                    case api.message:\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(Events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(this, message, event.destinationURL) });\n                        break;\n                    case api.ready:\n                        log('DRM: Key added.');\n                        eventBus.trigger(Events.KEY_ADDED);\n                        break;\n\n                    case api.close:\n                        log('DRM: Session closed.  SessionID = ' + this.getSessionID());\n                        eventBus.trigger(Events.KEY_SESSION_CLOSED, { data: this.getSessionID() });\n                        break;\n                }\n            }\n        };\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_3Feb2014.__dashjs_factory_name = 'ProtectionModel_3Feb2014';\nexport default FactoryMaker.getClassFactory(ProtectionModel_3Feb2014);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CableLabs ClearKey license server implementation\n *\n * For testing purposes and evaluating potential uses for ClearKey, we have developed\n * a dirt-simple API for requesting ClearKey licenses from a remote server.\n *\n * @implements LicenseServer\n * @class\n */\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction ClearKey() {\n\n    let instance;\n\n    function getServerURLFromMessage(url, message/*, messageType*/) {\n        // Build ClearKey server query string\n        const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n        url += '/?';\n        for (let i = 0; i < jsonMsg.kids.length; i++) {\n            url += jsonMsg.kids[i] + '&';\n        }\n        url = url.substring(0, url.length - 1);\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'GET';\n    }\n\n    function getResponseType(/*keySystemStr*/) {\n        return 'json';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        if (!serverResponse.hasOwnProperty('keys')) {\n            return null;\n        }\n        let keyPairs = [];\n        for (let i = 0; i < serverResponse.keys.length; i++) {\n            let keypair = serverResponse.keys[i];\n            let keyid = keypair.kid.replace(/=/g, '');\n            let key = keypair.k.replace(/=/g, '');\n\n            keyPairs.push(new KeyPair(keyid, key));\n        }\n        return new ClearKeyKeySet(keyPairs);\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nClearKey.__dashjs_factory_name = 'ClearKey';\nexport default FactoryMaker.getSingletonFactory(ClearKey);","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CastLabs DRMToday License Server implementation\n *\n * @implements LicenseServer\n * @class\n */\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport BASE64 from '../../../../externals/base64';\n\nfunction DRMToday() {\n\n    const keySystems = {\n        'com.widevine.alpha': {\n            responseType: 'json',\n            getLicenseMessage: function (response) {\n                return BASE64.decodeArray(response.license);\n            },\n            getErrorResponse: function (response) {\n                return response;\n            }\n        },\n        'com.microsoft.playready': {\n            responseType: 'arraybuffer',\n            getLicenseMessage: function (response) {\n                return response;\n            },\n            getErrorResponse: function (response) {\n                return String.fromCharCode.apply(null, new Uint8Array(response));\n            }\n        }\n    };\n\n    let instance;\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].responseType;\n    }\n\n    function getLicenseMessage(serverResponse, keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].getLicenseMessage(serverResponse);\n    }\n\n    function getErrorResponse(serverResponse, keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].getErrorResponse(serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nDRMToday.__dashjs_factory_name = 'DRMToday';\nexport default FactoryMaker.getSingletonFactory(DRMToday);","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Microsoft PlayReady Test License Server\n *\n * For testing content that uses the PlayReady test server at\n *\n * @implements LicenseServer\n * @class\n */\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction PlayReady() {\n\n    let instance;\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return serverResponse;\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nPlayReady.__dashjs_factory_name = 'PlayReady';\nexport default FactoryMaker.getSingletonFactory(PlayReady);","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction Widevine() {\n\n    let instance;\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return serverResponse;\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nWidevine.__dashjs_factory_name = 'Widevine';\nexport default FactoryMaker.getSingletonFactory(Widevine);","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc A collection of ClearKey encryption keys with an (optional) associated\n *  type\n * @ignore\n */\nclass ClearKeyKeySet {\n    /**\n     * @param {Array.<KeyPair>} keyPairs\n     * @param {string} type the type of keys in this set.  One of either 'persistent'\n     * or 'temporary'.  Can also be null or undefined.\n     * @class\n     * @ignore\n     */\n    constructor(keyPairs, type) {\n        if (type && type !== 'persistent' && type !== 'temporary')\n            throw new Error('Invalid ClearKey key set type!  Must be one of \\'persistent\\' or \\'temporary\\'');\n        this.keyPairs = keyPairs;\n        this.type = type;\n    }\n\n    /**\n     * Convert this key set to its JSON Web Key (JWK) representation\n     *\n     * @return {ArrayBuffer} JWK object UTF-8 encoded as ArrayBuffer\n     */\n    toJWK() {\n        let i;\n        let numKeys = this.keyPairs.length;\n        let jwk = {keys: []};\n\n        for (i = 0; i < numKeys; i++) {\n            let key = {\n                kty: 'oct',\n                alg: 'A128KW',\n                kid: this.keyPairs[i].keyID,\n                k: this.keyPairs[i].key\n            };\n            jwk.keys.push(key);\n        }\n        if (this.type) {\n            jwk.type = this.type;\n        }\n        let jwkString = JSON.stringify(jwk);\n        const len = jwkString.length;\n\n        // Convert JSON string to ArrayBuffer\n        let buf = new ArrayBuffer(len);\n        let bView = new Uint8Array(buf);\n        for (i = 0; i < len; i++)\n            bView[i] = jwkString.charCodeAt(i);\n        return buf;\n    }\n}\n\nexport default ClearKeyKeySet;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc EME-independent KeyError\n * @ignore\n */\nclass KeyError {\n    /**\n     * @param {Object} sessionToken the key session to which this error is associated\n     * @param {string} errorString an informational error message\n     * @class\n     * @deprecated Newest versions of EME APIs will not use this error object\n     */\n    constructor(sessionToken, errorString) {\n        this.sessionToken = sessionToken;\n        this.error = errorString;\n    }\n}\n\nexport default KeyError;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc EME-independent KeyMessage\n * @ignore\n */\nclass KeyMessage {\n    /**\n     * @param {SessionToken} sessionToken the session\n     * to which the key message is associated\n     * @param {ArrayBuffer} message the key message\n     * @param {string} defaultURL license acquisition URL provided by the CDM\n     * @param {string} messageType Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @class\n     */\n    constructor(sessionToken, message, defaultURL, messageType) {\n        this.sessionToken = sessionToken;\n        this.message = message;\n        this.defaultURL = defaultURL;\n        this.messageType = messageType ? messageType : 'license-request';\n    }\n}\n\nexport default KeyMessage;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Represents a 128-bit keyID and 128-bit encryption key\n * @ignore\n */\nclass KeyPair {\n    /**\n     * @param {string} keyID 128-bit key ID, base64 encoded, with no padding\n     * @param {string} key 128-bit encryption key, base64 encoded, with no padding\n     * @class\n     * @ignore\n     */\n    constructor(keyID, key) {\n        this.keyID = keyID;\n        this.key = key;\n    }\n}\n\nexport default KeyPair;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Creates a new key system access token.  Represents a valid key system for\n * given piece of content and key system requirements.  Used to initialize license\n * acquisition operations.\n * @ignore\n */\nclass KeySystemAccess {\n    /**\n     * @param {MediaPlayer.dependencies.protection.KeySystem} keySystem the key system\n     * @param {KeySystemConfiguration} ksConfiguration the\n     * subset of configurations passed to the key system access request that are supported\n     * by this user agent\n     * @class\n     * @ignore\n     */\n    constructor(keySystem, ksConfiguration) {\n        this.keySystem = keySystem;\n        this.ksConfiguration = ksConfiguration;\n    }\n}\n\nexport default KeySystemAccess;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc Represents a set of configurations that describe the capabilities desired for\n *  support by a given CDM\n * @ignore\n */\nclass KeySystemConfiguration {\n    /**\n     * @param {Array.<MediaCapability>} audioCapabilities array of\n     * desired audio capabilities.  Higher preference capabilities should be placed earlier\n     * in the array.\n     * @param {Array.<MediaCapability>} videoCapabilities array of\n     * desired video capabilities.  Higher preference capabilities should be placed earlier\n     * in the array.\n     * @param {string} distinctiveIdentifier desired use of distinctive identifiers.\n     * One of \"required\", \"optional\", or \"not-allowed\"\n     * @param {string} persistentState desired support for persistent storage of\n     * key systems.  One of \"required\", \"optional\", or \"not-allowed\"\n     * @param {Array.<string>} sessionTypes List of session types that must\n     * be supported by the key system\n     * @class\n     */\n    constructor(audioCapabilities, videoCapabilities, distinctiveIdentifier, persistentState, sessionTypes) {\n        this.initDataTypes = [ 'cenc' ];\n        if (audioCapabilities && audioCapabilities.length) {\n            this.audioCapabilities = audioCapabilities;\n        }\n        if (videoCapabilities && videoCapabilities.length) {\n            this.videoCapabilities = videoCapabilities;\n        }\n        this.distinctiveIdentifier = distinctiveIdentifier;\n        this.persistentState = persistentState;\n        this.sessionTypes = sessionTypes;\n    }\n}\n\nexport default KeySystemConfiguration;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc A media capability\n * @ignore\n */\nclass MediaCapability {\n    /**\n     * @param {string} contentType MIME type and codecs (RFC6386)\n     * @param {string} robustness\n     * @class\n     * @ignore\n     */\n    constructor(contentType, robustness) {\n        this.contentType = contentType;\n        this.robustness = robustness;\n    }\n}\n\nexport default MediaCapability;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc NeedKey\n * @ignore\n */\nclass NeedKey {\n    /**\n     * @param {ArrayBuffer} initData the initialization data\n     * @param {string} initDataType initialization data type\n     * @class\n     */\n    constructor(initData, initDataType) {\n        this.initData = initData;\n        this.initDataType = initDataType;\n    }\n}\n\nexport default NeedKey;\n"]}